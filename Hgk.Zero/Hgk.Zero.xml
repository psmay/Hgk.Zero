<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hgk.Zero</name>
    </assembly>
    <members>
        <member name="T:Hgk.Zero.Options.AbstractOpt`1">
            <summary>
            An abstract class that implements <see cref="T:Hgk.Zero.Options.IOpt`1"/>, <see cref="T:Hgk.Zero.Options.IOptFixable`1"/>, and
            <see cref="T:System.IEquatable`1"/> based on the object returned by <see cref="M:Hgk.Zero.Options.AbstractOpt`1.ToFixed"/>.
            </summary>
        </member>
        <member name="T:Hgk.Zero.Options.AbstractSingleResultOpt`1">
            <summary>
            An abstract class that implements <see cref="T:Hgk.Zero.Options.ISingleResultOpt`1"/>, <see
            cref="T:Hgk.Zero.Options.IOptFixable`1"/>, <see cref="T:Hgk.Zero.Options.ISingleResultOptFixable`1"/>, and <see
            cref="T:System.IEquatable`1"/> based on the object returned by <see cref="M:Hgk.Zero.Options.AbstractSingleResultOpt`1.ToFixedSingleResultOpt"/>.
            </summary>
        </member>
        <member name="T:Hgk.Zero.Options.Convert.ParseToOpt">
            <summary>
            Common parse methods adapted to return options.
            </summary>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseBoolean(System.String)">
            <summary>
            Tries to convert the specified string representation of a logical value to its <see
            cref="T:System.Boolean"/> equivalent. The result of the conversion is returned as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.Boolean.TryParse(System.String,System.Boolean@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains true if <paramref name="value"/> is equivalent to <see
            cref="F:System.Boolean.TrueString"/> or false if <paramref name="value"/> is equivalent
            to <see cref="F:System.Boolean.FalseString"/>, if the conversion succeeded; otherwise, an
            empty option. The conversion fails if <paramref name="value"/> is null or is not
            equivalent to the value of either the <see cref="F:System.Boolean.TrueString"/> or <see
            cref="F:System.Boolean.FalseString"/> field.
            </returns>
            <param name="value">A string containing the value to convert.</param>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseByte(System.String)">
            <summary>
            Tries to convert the string representation of a number to its <see cref="T:System.Byte"/>
            equivalent, and returns an option containing the result of the conversion.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.Byte.TryParse(System.String,System.Byte@)"/>
            as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the <see cref="T:System.Byte"/> value equivalent to the number
            contained in <paramref name="s"/>, if the conversion succeeded; otherwise, an empty option.
            </returns>
            <param name="s">
            A string that contains a number to convert. The string is interpreted using the <see
            cref="F:System.Globalization.NumberStyles.Integer"/> style.
            </param>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific
            format to its <see cref="T:System.Byte"/> equivalent. The result of the conversion is
            returned as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.Byte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the 8-bit unsigned integer value equivalent to the number
            contained in <paramref name="s"/>, if the conversion succeeded; otherwise, an empty
            option. The conversion fails if the <paramref name="s"/> parameter is null, is not of the
            correct format, or represents a number less than <see cref="F:System.Byte.MinValue"/> or
            greater than <see cref="F:System.Byte.MaxValue"/>.
            </returns>
            <param name="s">
            A string containing a number to convert. The string is interpreted using the style
            specified by <paramref name="style"/>.
            </param>
            <param name="style">
            A bitwise combination of enumeration values that indicates the style elements that can be
            present in <paramref name="s"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref
            name="s"/>. If <paramref name="provider"/> is null, the thread current culture is used.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is not a combination of <see
            cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see
            cref="F:System.Globalization.NumberStyles.HexNumber"/> values.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseChar(System.String)">
            <summary>
            Converts the value of the specified string to its equivalent Unicode character. The
            result of the conversion is returned as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.Char.TryParse(System.String,System.Char@)"/>
            as an option.
            </para>
            </remarks>
            <returns>
            An option that contains a Unicode character equivalent to the sole character in <paramref
            name="s"/>, if the conversion succeeded; otherwise, an empty option. The conversion fails
            if the <paramref name="s"/> parameter is null or the length of <paramref name="s"/> is
            not 1.
            </returns>
            <param name="s">A string that contains a single character, or null.</param>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseDateTime(System.String)">
            <summary>
            Converts the specified string representation of a date and time to its <see
            cref="T:System.DateTime"/> equivalent and returns an option containing the result of the conversion.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the <see cref="T:System.DateTime"/> value equivalent to the date
            and time contained in <paramref name="s"/>, if the conversion succeeded; otherwise, an
            empty option. The conversion fails if the <paramref name="s"/> parameter is null, is an
            empty string (""), or does not contain a valid string representation of a date and time.
            </returns>
            <param name="s">A string containing a date and time to convert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The date is in Japanese Emperor Year (Wareki) format and the year is out of range.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseDateTime(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Converts the specified string representation of a date and time to its <see
            cref="T:System.DateTime"/> equivalent using the specified culture-specific format
            information and formatting style, and returns an option containing the result of the conversion.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the <see cref="T:System.DateTime"/> value equivalent to the date
            and time contained in <paramref name="s"/>, if the conversion succeeded; otherwise, an
            empty option. The conversion fails if the <paramref name="s"/> parameter is null, is an
            empty string (""), or does not contain a valid string representation of a date and time.
            </returns>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s"/>.
            </param>
            <param name="styles">
            A bitwise combination of enumeration values that defines how to interpret the parsed date
            in relation to the current time zone or the current date. A typical value to specify is
            <see cref="F:System.Globalization.DateTimeStyles.None"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="styles"/> is not a valid <see
            cref="T:System.Globalization.DateTimeStyles"/> value.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="styles"/> contains an invalid combination of <see
            cref="T:System.Globalization.DateTimeStyles"/> values (for example, both <see
            cref="F:System.Globalization.DateTimeStyles.AssumeLocal"/> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal"/>).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The date is in Japanese Emperor Year (Wareki) format and the year is out of range.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="provider"/> is a neutral culture and cannot be used in a parsing operation.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseDateTimeExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Converts the specified string representation of a date and time to its <see
            cref="T:System.DateTime"/> equivalent using the specified format, culture-specific format
            information, and style. The format of the string representation must match the specified
            format exactly. The method returns an option containing the result of the conversion.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the <see cref="T:System.DateTime"/> value equivalent to the date
            and time contained in <paramref name="s"/>, if the conversion succeeded; otherwise, an
            empty option. The conversion fails if either the <paramref name="s"/> or <paramref
            name="format"/> parameter is null, is an empty string, or does not contain a date and
            time that correspond to the pattern specified in <paramref name="format"/>.
            </returns>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="format">The required format of <paramref name="s"/>.</param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s"/>.
            </param>
            <param name="style">
            A bitwise combination of one or more enumeration values that indicate the permitted
            format of <paramref name="s"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is not a valid <see
            cref="T:System.Globalization.DateTimeStyles"/> value.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> contains an invalid combination of <see
            cref="T:System.Globalization.DateTimeStyles"/> values (for example, both <see
            cref="F:System.Globalization.DateTimeStyles.AssumeLocal"/> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal"/>).
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseDateTimeExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Converts the specified string representation of a date and time to its <see
            cref="T:System.DateTime"/> equivalent using the specified array of formats,
            culture-specific format information, and style. The format of the string representation
            must match at least one of the specified formats exactly. The method returns an option
            containing the result of the conversion.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the <see cref="T:System.DateTime"/> value equivalent to the date
            and time contained in <paramref name="s"/>, if the conversion succeeded; otherwise, an
            empty option. The conversion fails if <paramref name="s"/> or <paramref name="formats"/>
            is null, <paramref name="s"/> or an element of <paramref name="formats"/> is an empty
            string, or the format of <paramref name="s"/> is not exactly as specified by at least one
            of the format patterns in <paramref name="formats"/>.
            </returns>
            <param name="s">A string containing one or more dates and times to convert.</param>
            <param name="formats">An array of allowable formats of <paramref name="s"/>.</param>
            <param name="provider">
            An object that supplies culture-specific format information about <paramref name="s"/>.
            </param>
            <param name="style">
            A bitwise combination of enumeration values that indicates the permitted format of
            <paramref name="s"/>. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is not a valid <see
            cref="T:System.Globalization.DateTimeStyles"/> value.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> contains an invalid combination of <see
            cref="T:System.Globalization.DateTimeStyles"/> values (for example, both <see
            cref="F:System.Globalization.DateTimeStyles.AssumeLocal"/> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal"/>).
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseDateTimeOffset(System.String)">
            <summary>
            Tries to converts a specified string representation of a date and time to its <see
            cref="T:System.DateTimeOffset"/> equivalent, and returns an option containing the result
            of the conversion.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the <see cref="T:System.DateTimeOffset"/> equivalent to the date
            and time of <paramref name="input"/>, if the conversion succeeded; otherwise, an empty
            option. The conversion fails if the <paramref name="input"/> parameter is null or does
            not contain a valid string representation of a date and time.
            </returns>
            <param name="input">A string that contains a date and time to convert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The date is in Japanese Emperor Year (Wareki) format and the year is out of range.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseDateTimeOffset(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Tries to convert a specified string representation of a date and time to its <see
            cref="T:System.DateTimeOffset"/> equivalent, and returns an option containing the result
            of the conversion.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the <see cref="T:System.DateTimeOffset"/> value equivalent to the
            date and time of <paramref name="input"/>, if the conversion succeeded; otherwise, an
            empty option. The conversion fails if the <paramref name="input"/> parameter is null or
            does not contain a valid string representation of a date and time.
            </returns>
            <param name="input">A string that contains a date and time to convert.</param>
            <param name="formatProvider">
            An object that provides culture-specific formatting information about <paramref name="input"/>.
            </param>
            <param name="styles">
            A bitwise combination of enumeration values that indicates the permitted format of
            <paramref name="input"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="styles"/> includes an undefined <see
            cref="T:System.Globalization.DateTimeStyles"/> value.
            </exception>
            <exception cref="T:System.ArgumentException">
            <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault"/> is not supported.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="styles"/> includes mutually exclusive <see
            cref="T:System.Globalization.DateTimeStyles"/> values.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The date is in Japanese Emperor Year (Wareki) format and the year is out of range.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseDateTimeOffsetExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Converts the specified string representation of a date and time to its <see
            cref="T:System.DateTimeOffset"/> equivalent using the specified format, culture-specific
            format information, and style and returns the result as an option. The format of the
            string representation must match the specified format exactly.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see
            cref="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the <see cref="T:System.DateTimeOffset"/> equivalent to the date
            and time of <paramref name="input"/>, if the conversion succeeded; otherwise, an empty
            option. The conversion fails if the <paramref name="input"/> parameter is null, or does
            not contain a valid string representation of a date and time in the expected format
            defined by <paramref name="format"/> and <paramref name="formatProvider"/>.
            </returns>
            <param name="input">A string that contains a date and time to convert.</param>
            <param name="format">
            A format specifier that defines the required format of <paramref name="input"/>.
            </param>
            <param name="formatProvider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>.
            </param>
            <param name="styles">
            A bitwise combination of enumeration values that indicates the permitted format of input.
            A typical value to specify is None.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="styles"/> includes an undefined <see
            cref="T:System.Globalization.DateTimeStyles"/> value.
            </exception>
            <exception cref="T:System.ArgumentException">
            <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault"/> is not supported.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="styles"/> includes mutually exclusive <see
            cref="T:System.Globalization.DateTimeStyles"/> values.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseDecimal(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:System.Decimal"/>
            equivalent. The result of the conversion is returned as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.Decimal.TryParse(System.String,System.Decimal@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the <see cref="T:System.Decimal"/> number that is equivalent to
            the numeric value contained in <paramref name="s"/>, if the conversion succeeded;
            otherwise, an empty option. The conversion fails if the <paramref name="s"/> parameter is
            null, is not a number in a valid format, or represents a number less than <see
            cref="F:System.Decimal.MinValue"/> or greater than <see cref="F:System.Decimal.MaxValue"/>.
            </returns>
            <param name="s">The string representation of the number to convert.</param>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseDecimal(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number to its <see cref="T:System.Decimal"/>
            equivalent using the specified style and culture-specific format. The result of the
            conversion is returned as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the <see cref="T:System.Decimal"/> number that is equivalent to
            the numeric value contained in <paramref name="s"/>, if the conversion succeeded;
            otherwise, an empty option. The conversion fails if the <paramref name="s"/> parameter is
            null, is not in a format compliant with <paramref name="style"/>, or represents a number
            less than <see cref="F:System.Decimal.MinValue"/> or greater than <see cref="F:System.Decimal.MaxValue"/>.
            </returns>
            <param name="s">The string representation of the number to convert.</param>
            <param name="style">
            A bitwise combination of enumeration values that indicates the permitted format of
            <paramref name="s"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Number"/>.
            </param>
            <param name="provider">
            An object that supplies culture-specific parsing information about <paramref name="s"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is the <see
            cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> value.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseDouble(System.String)">
            <summary>
            Converts the string representation of a number to its double-precision floating-point
            number equivalent. The result of the conversion is returned as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.Double.TryParse(System.String,System.Double@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the double-precision floating-point number equivalent to the
            <paramref name="s"/> parameter, if the conversion succeeded; otherwise, an empty option.
            The conversion fails if the <paramref name="s"/> parameter is null, is not a number in a
            valid format, or represents a number less than <see cref="F:System.Double.MinValue"/> or
            greater than <see cref="F:System.Double.MaxValue"/>.
            </returns>
            <param name="s">A string containing a number to convert.</param>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific
            format to its double-precision floating-point number equivalent. The result of the
            conversion is returned as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains a double-precision floating-point number equivalent to the
            numeric value or symbol contained in <paramref name="s"/>, if the conversion succeeded;
            otherwise, an empty option. The conversion fails if the <paramref name="s"/> parameter is
            null, is not in a format compliant with <paramref name="style"/>, represents a number
            less than <see cref="F:System.SByte.MinValue"/> or greater than <see
            cref="F:System.SByte.MaxValue"/>, or if <paramref name="style"/> is not a valid
            combination of <see cref="T:System.Globalization.NumberStyles"/> enumerated constants.
            </returns>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that
            indicates the permitted format of <paramref name="s"/>. A typical value to specify is
            <see cref="F:System.Globalization.NumberStyles.Float"/> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands"/>.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting
            information about <paramref name="s"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> includes the <see
            cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> value.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseEnum``1(System.String)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated
            constants to an equivalent enumerated object. The result of the conversion is returned as
            an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.Enum.TryParse``1(System.String,``0@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains an object of type <typeparamref name="TEnum"/> whose value is
            represented by <paramref name="value"/>, if the conversion succeeded; otherwise, an empty option.
            </returns>
            <param name="value">
            The string representation of the enumeration name or underlying value to convert.
            </param>
            <typeparam name="TEnum">The enumeration type to which to convert <paramref name="value"/>.</typeparam>
            <exception cref="T:System.ArgumentException">
            <typeparamref name="TEnum"/> is not an enumeration type.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseEnum``1(System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated
            constants to an equivalent enumerated object. A parameter specifies whether the operation
            is case-sensitive. The result of the conversion is returned as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains an object of type <typeparamref name="TEnum"/> whose value is
            represented by <paramref name="value"/>, if the conversion succeeded; otherwise, an empty option.
            </returns>
            <param name="value">
            The string representation of the enumeration name or underlying value to convert.
            </param>
            <param name="ignoreCase">true to ignore case; false to consider case.</param>
            <typeparam name="TEnum">The enumeration type to which to convert <paramref name="value"/>.</typeparam>
            <exception cref="T:System.ArgumentException">
            <typeparamref name="TEnum"/> is not an enumeration type.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseGuid(System.String)">
            <summary>
            Converts the string representation of a GUID to the equivalent <see
            cref="T:System.Guid"/> structure and returns the result as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.Guid.TryParse(System.String,System.Guid@)"/>
            as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the parsed value, if the conversion succeeded; otherwise, an
            empty option.
            </returns>
            <param name="input">The GUID to convert.</param>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseGuidExact(System.String,System.String)">
            <summary>
            Converts the string representation of a GUID to the equivalent <see
            cref="T:System.Guid"/> structure and returns the result as an option. provided that the
            string is in the specified format.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the parsed value, if the conversion succeeded; otherwise, an
            empty option.
            </returns>
            <param name="input">The GUID to convert.</param>
            <param name="format">
            One of the following specifiers that indicates the exact format to use when interpreting
            <paramref name="input"/>: "N", "D", "B", "P", or "X".
            </param>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseInt16(System.String)">
            <summary>
            Converts the string representation of a number to its 16-bit signed integer equivalent.
            The result of the conversion is returned as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.Int16.TryParse(System.String,System.Int16@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the 16-bit signed integer value equivalent to the number
            contained in <paramref name="s"/>, if the conversion succeeded; otherwise, an empty
            option. The conversion fails if the <paramref name="s"/> parameter is null, is not of the
            correct format, or represents a number less than <see cref="F:System.Int16.MinValue"/> or
            greater than <see cref="F:System.Int16.MaxValue"/>.
            </returns>
            <param name="s">A string containing a number to convert.</param>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific
            format to its 16-bit signed integer equivalent. The result of the conversion is returned
            as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.Int16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the 16-bit signed integer value equivalent to the number
            contained in <paramref name="s"/>, if the conversion succeeded; otherwise, an empty
            option. The conversion fails if the <paramref name="s"/> parameter is null, is not in a
            format compliant with <paramref name="style"/>, or represents a number less than <see
            cref="F:System.Int16.MinValue"/> or greater than <see cref="F:System.Int16.MaxValue"/>.
            </returns>
            <param name="s">
            A string containing a number to convert. The string is interpreted using the style
            specified by <paramref name="style"/>.
            </param>
            <param name="style">
            A bitwise combination of enumeration values that indicates the style elements that can be
            present in <paramref name="s"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is not a combination of <see
            cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see
            cref="F:System.Globalization.NumberStyles.HexNumber"/> values.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseInt32(System.String)">
            <summary>
            Converts the string representation of a number to its 32-bit signed integer equivalent.
            The result of the conversion is returned as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.Int32.TryParse(System.String,System.Int32@)"/>
            as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the 32-bit signed integer value equivalent to the number
            contained in <paramref name="s"/>, if the conversion succeeded; otherwise, an empty
            option. The conversion fails if the <paramref name="s"/> parameter is null, is not of the
            correct format, or represents a number less than <see cref="F:System.Int32.MinValue"/> or
            greater than <see cref="F:System.Int32.MaxValue"/>.
            </returns>
            <param name="s">A string containing a number to convert.</param>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific
            format to its 32-bit signed integer equivalent. The result of the conversion is returned
            as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the 32-bit signed integer value equivalent to the number
            contained in <paramref name="s"/>, if the conversion succeeded; otherwise, an empty
            option. The conversion fails if the <paramref name="s"/> parameter is null, is not in a
            format compliant with <paramref name="style"/>, or represents a number less than <see
            cref="F:System.Int32.MinValue"/> or greater than <see cref="F:System.Int32.MaxValue"/>.
            </returns>
            <param name="s">
            A string containing a number to convert. The string is interpreted using the style
            specified by <paramref name="style"/>.
            </param>
            <param name="style">
            A bitwise combination of enumeration values that indicates the style elements that can be
            present in <paramref name="s"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is not a combination of <see
            cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see
            cref="F:System.Globalization.NumberStyles.HexNumber"/> values.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseInt64(System.String)">
            <summary>
            Converts the string representation of a number to its 64-bit signed integer equivalent.
            The result of the conversion is returned as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.Int64.TryParse(System.String,System.Int64@)"/>
            as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the 64-bit signed integer value equivalent to the number
            contained in <paramref name="s"/>, if the conversion succeeded; otherwise, an empty
            option. The conversion fails if the <paramref name="s"/> parameter is null, is not of the
            correct format, or represents a number less than <see cref="F:System.Int64.MinValue"/> or
            greater than <see cref="F:System.Int64.MaxValue"/>.
            </returns>
            <param name="s">A string containing a number to convert.</param>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific
            format to its 64-bit signed integer equivalent. The result of the conversion is returned
            as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.Int64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the 64-bit signed integer value equivalent to the number
            contained in <paramref name="s"/>, if the conversion succeeded; otherwise, an empty
            option. The conversion fails if the <paramref name="s"/> parameter is null, is not in a
            format compliant with <paramref name="style"/>, or represents a number less than <see
            cref="F:System.Int64.MinValue"/> or greater than <see cref="F:System.Int64.MaxValue"/>.
            </returns>
            <param name="s">
            A string containing a number to convert. The string is interpreted using the style
            specified by <paramref name="style"/>.
            </param>
            <param name="style">
            A bitwise combination of enumeration values that indicates the style elements that can be
            present in <paramref name="s"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is not a combination of <see
            cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see
            cref="F:System.Globalization.NumberStyles.HexNumber"/> values.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseSByte(System.String)">
            <summary>
            Tries to convert the string representation of a number to its <see
            cref="T:System.SByte"/> equivalent, and returns an option containing the result of the conversion.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.SByte.TryParse(System.String,System.SByte@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the 8-bit signed integer value that is equivalent to the number
            contained in <paramref name="s"/>, if the conversion succeeded; otherwise, an empty
            option. The conversion fails if the <paramref name="s"/> parameter is null, is not in the
            correct format, or represents a number that is less than <see
            cref="F:System.SByte.MinValue"/> or greater than <see cref="F:System.SByte.MaxValue"/>.
            </returns>
            <param name="s">A string that contains a number to convert.</param>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseSByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Tries to convert the string representation of a number in a specified style and
            culture-specific format to its <see cref="T:System.SByte"/> equivalent, and returns an
            option containing the result of the conversion.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.SByte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the 8-bit signed integer value equivalent to the number contained
            in <paramref name="s"/>, if the conversion succeeded; otherwise, an empty option. The
            conversion fails if the <paramref name="s"/> parameter is null, is not in a format
            compliant with <paramref name="style"/>, or represents a number less than <see
            cref="F:System.SByte.MinValue"/> or greater than <see cref="F:System.SByte.MaxValue"/>.
            </returns>
            <param name="s">A string representing a number to convert.</param>
            <param name="style">
            A bitwise combination of enumeration values that indicates the permitted format of
            <paramref name="s"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is not a combination of <see
            cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see
            cref="F:System.Globalization.NumberStyles.HexNumber"/> values.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseSingle(System.String)">
            <summary>
            Converts the string representation of a number to its single-precision floating-point
            number equivalent. The result of the conversion is returned as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.Single.TryParse(System.String,System.Single@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains single-precision floating-point number equivalent to the numeric
            value or symbol contained in <paramref name="s"/>, if the conversion succeeded;
            otherwise, an empty option. The conversion fails if the <paramref name="s"/> parameter is
            null, is not a number in a valid format, or represents a number less than <see
            cref="F:System.Single.MinValue"/> or greater than <see cref="F:System.Single.MaxValue"/>.
            </returns>
            <param name="s">A string representing a number to convert.</param>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseSingle(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific
            format to its single-precision floating-point number equivalent. The result of the
            conversion is returned as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the single-precision floating-point number equivalent to the
            numeric value or symbol contained in <paramref name="s"/>, if the conversion succeeded;
            otherwise, an empty option. The conversion fails if the <paramref name="s"/> parameter is
            null, is not in a format compliant with <paramref name="style"/>, represents a number
            less than <see cref="F:System.Single.MinValue"/> or greater than <see
            cref="F:System.Single.MaxValue"/>, or if <paramref name="style"/> is not a valid
            combination of <see cref="T:System.Globalization.NumberStyles"/> enumerated constants.
            </returns>
            <param name="s">A string representing a number to convert.</param>
            <param name="style">
            A bitwise combination of enumeration values that indicates the permitted format of
            <paramref name="s"/>. A typical value to specify is <see
            cref="F:System.Globalization.NumberStyles.Float"/> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands"/>.
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is the <see
            cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> value.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseTimeSpan(System.String)">
            <summary>
            Converts the string representation of a time interval to its <see
            cref="T:System.TimeSpan"/> equivalent and returns an option containing the result of the conversion.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains an object that represents the time interval specified by
            <paramref name="s"/>, if the conversion succeeded; otherwise, an empty option.
            </returns>
            <param name="s">A string that specifies the time interval to convert.</param>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseTimeSpan(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a time interval to its <see
            cref="T:System.TimeSpan"/> equivalent by using the specified culture-specific formatting
            information, and returns an option containing the result of the conversion.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.TimeSpan.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains an object that represents the time interval specified by
            <paramref name="input"/>, if the conversion succeeded; otherwise, an empty option.
            </returns>
            <param name="input">A string that specifies the time interval to convert.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseTimeSpanExact(System.String,System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a time interval to its <see
            cref="T:System.TimeSpan"/> equivalent by using the specified format and culture-specific
            format information, and returns an option containing the result of the conversion. The
            format of the string representation must match the specified format exactly.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.TimeSpan@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains an object that represents the time interval specified by
            <paramref name="input"/>, if the conversion succeeded; otherwise, an empty option.
            </returns>
            <param name="input">A string that specifies the time interval to convert.</param>
            <param name="format">
            A standard or custom format string that defines the required format of <paramref name="input"/>.
            </param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseTimeSpanExact(System.String,System.String[],System.IFormatProvider)">
            <summary>
            Converts the specified string representation of a time interval to its <see
            cref="T:System.TimeSpan"/> equivalent by using the specified formats and culture-specific
            format information, and returns an option containing the result of the conversion. The
            format of the string representation must match one of the specified formats exactly.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains an object that represents the time interval specified by
            <paramref name="input"/>, if the conversion succeeded; otherwise, an empty option.
            </returns>
            <param name="input">A string that specifies the time interval to convert.</param>
            <param name="formats">
            A array of standard or custom format strings that define the acceptable formats of
            <paramref name="input"/>.
            </param>
            <param name="formatProvider">An object that provides culture-specific formatting information.</param>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseTimeSpanExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)">
            <summary>
            Converts the string representation of a time interval to its <see
            cref="T:System.TimeSpan"/> equivalent by using the specified format, culture-specific
            format information, and styles, and returns an option containing the result of the
            conversion. The format of the string representation must match the specified format exactly.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains an object that represents the time interval specified by
            <paramref name="input"/>, if the conversion succeeded; otherwise, an empty option.
            </returns>
            <param name="input">A string that specifies the time interval to convert.</param>
            <param name="format">
            A standard or custom format string that defines the required format of <paramref name="input"/>.
            </param>
            <param name="formatProvider">An object that provides culture-specific formatting information.</param>
            <param name="styles">
            One or more enumeration values that indicate the style of <paramref name="input"/>.
            </param>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseTimeSpanExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)">
            <summary>
            Converts the specified string representation of a time interval to its <see
            cref="T:System.TimeSpan"/> equivalent by using the specified formats, culture-specific
            format information, and styles, and returns an option containing the result of the
            conversion. The format of the string representation must match one of the specified
            formats exactly.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains an object that represents the time interval specified by
            <paramref name="input"/>, if the conversion succeeded; otherwise, an empty option.
            </returns>
            <param name="input">A string that specifies the time interval to convert.</param>
            <param name="formats">
            A array of standard or custom format strings that define the acceptable formats of
            <paramref name="input"/>.
            </param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <param name="styles">
            One or more enumeration values that indicate the style of <paramref name="input"/>.
            </param>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseUInt16(System.String)">
            <summary>
            Tries to convert the string representation of a number to its 16-bit unsigned integer
            equivalent. The result of the conversion is returned as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.UInt16.TryParse(System.String,System.UInt16@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the 16-bit unsigned integer value that is equivalent to the
            number contained in <paramref name="s"/>, if the conversion succeeded; otherwise, an
            empty option. The conversion fails if the <paramref name="s"/> parameter is null, is not
            in the correct format. , or represents a number less than <see
            cref="F:System.UInt16.MinValue"/> or greater than <see cref="F:System.UInt16.MaxValue"/>.
            </returns>
            <param name="s">A string that represents the number to convert.</param>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseUInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Tries to convert the string representation of a number in a specified style and
            culture-specific format to its 16-bit unsigned integer equivalent. The result of the
            conversion is returned as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.UInt16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the 16-bit unsigned integer value equivalent to the number
            contained in <paramref name="s"/>, if the conversion succeeded; otherwise, an empty
            option. The conversion fails if the <paramref name="s"/> parameter is null, is not in a
            format compliant with <paramref name="style"/>, or represents a number less than <see
            cref="F:System.UInt16.MinValue"/> or greater than <see cref="F:System.UInt16.MaxValue"/>.
            </returns>
            <param name="s">
            A string that represents the number to convert. The string is interpreted by using the
            style specified by the <paramref name="style"/> parameter.
            </param>
            <param name="style">
            A bitwise combination of enumeration values that indicates the permitted format of
            <paramref name="s"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is not a combination of <see
            cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see
            cref="F:System.Globalization.NumberStyles.HexNumber"/> values.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseUInt32(System.String)">
            <summary>
            Tries to convert the string representation of a number to its 32-bit unsigned integer
            equivalent. The result of the conversion is returned as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.UInt32.TryParse(System.String,System.UInt32@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the 32-bit unsigned integer value that is equivalent to the
            number contained in <paramref name="s"/>, if the conversion succeeded; otherwise, an
            empty option. The conversion fails if the <paramref name="s"/> parameter is null, is not
            of the correct format, or represents a number that is less than <see
            cref="F:System.UInt32.MinValue"/> or greater than <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
            <param name="s">A string that represents the number to convert.</param>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseUInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Tries to convert the string representation of a number in a specified style and
            culture-specific format to its 32-bit unsigned integer equivalent. The result of the
            conversion is returned as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.UInt32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the 32-bit unsigned integer value equivalent to the number
            contained in <paramref name="s"/>, if the conversion succeeded; otherwise, an empty
            option. The conversion fails if the <paramref name="s"/> parameter is null, is not in a
            format compliant with <paramref name="style"/>, or represents a number that is less than
            <see cref="F:System.UInt32.MinValue"/> or greater than <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
            <param name="s">
            A string that represents the number to convert. The string is interpreted by using the
            style specified by the <paramref name="style"/> parameter.
            </param>
            <param name="style">
            A bitwise combination of enumeration values that indicates the permitted format of
            <paramref name="s"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is not a combination of <see
            cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see
            cref="F:System.Globalization.NumberStyles.HexNumber"/> values.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseUInt64(System.String)">
            <summary>
            Tries to convert the string representation of a number to its 64-bit unsigned integer
            equivalent. The result of the conversion is returned as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.UInt64.TryParse(System.String,System.UInt64@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the 64-bit unsigned integer value that is equivalent to the
            number contained in <paramref name="s"/>, if the conversion succeeded; otherwise, an
            empty option. The conversion fails if the <paramref name="s"/> parameter is null, is not
            of the correct format, or represents a number less than <see
            cref="F:System.UInt64.MinValue"/> or greater than <see cref="F:System.UInt64.MaxValue"/>.
            </returns>
            <param name="s">A string that represents the number to convert.</param>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseUInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Tries to convert the string representation of a number in a specified style and
            culture-specific format to its 64-bit unsigned integer equivalent. The result of the
            conversion is returned as an option.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.UInt64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the 64-bit unsigned integer value equivalent to the number
            contained in <paramref name="s"/>, if the conversion succeeded; otherwise, an empty
            option. The conversion fails if the <paramref name="s"/> parameter is null, is not in a
            format compliant with <paramref name="style"/>, or represents a number less than <see
            cref="F:System.UInt64.MinValue"/> or greater than <see cref="F:System.UInt64.MaxValue"/>.
            </returns>
            <param name="s">
            A string that represents the number to convert. The string is interpreted by using the
            style specified by the <paramref name="style"/> parameter.
            </param>
            <param name="style">
            A bitwise combination of enumeration values that indicates the permitted format of
            <paramref name="s"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="s"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="style"/> is not a combination of <see
            cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see
            cref="F:System.Globalization.NumberStyles.HexNumber"/> values.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseVersion(System.String)">
            <summary>
            Tries to convert the string representation of a version number to an equivalent <see
            cref="T:System.Version"/> object, and returns an option containing the result of the conversion.
            </summary>
            <remarks>
            <para>
            This method returns the result produced by <see cref="M:System.Version.TryParse(System.String,System.Version@)"/> as an option.
            </para>
            </remarks>
            <returns>
            An option that contains the <see cref="T:System.Version"/> equivalent of the number that
            is contained in <paramref name="input"/>, if the conversion succeeded; otherwise, an
            empty option.
            </returns>
            <param name="input">A string that contains a version number to convert.</param>
        </member>
        <member name="T:Hgk.Zero.Options.DeferredOpt`1">
            <summary>
            A complete deferred option based on the return value of a callback (use <see
            cref="M:Hgk.Zero.Options.Opt.Defer``1(System.Func{Hgk.Zero.Options.Opt{``0}})"/> to instantiate).
            </summary>
        </member>
        <member name="T:Hgk.Zero.Options.DeferredSingleResultOpt`1">
            <summary>
            A complete deferred single result option based on the return value of a callback (use <see
            cref="M:Hgk.Zero.Options.SingleResultOpt.Defer``1(System.Func{Hgk.Zero.Options.FixedSingleResultOpt{``0}})"/> to instantiate).
            </summary>
        </member>
        <member name="T:Hgk.Zero.Options.FixedSingleResultOpt`1">
            <summary>
            A fixed, immutable single result option.
            </summary>
        </member>
        <member name="T:Hgk.Zero.Options.IOpt">
            <summary>
            Type for options whose contained value type is not specified.
            </summary>
            <remarks>
            <para>
            An <see cref="T:Hgk.Zero.Options.IOpt"/> can be coerced to a typed option by using <see
            cref="M:Hgk.Zero.Options.Opt.Cast``1(Hgk.Zero.Options.IOpt)"/>, which forcibly casts the contained value to the specified
            type if necessary, or <see cref="M:Hgk.Zero.Options.Opt.OfType``1(Hgk.Zero.Options.IOpt)"/>, which produces an empty option
            if the contained value cannot be cast to the specified type.
            </para>
            <para>
            <see cref="T:Hgk.Zero.Options.IOpt"/> implements the non-generic <see cref="T:System.Collections.IEnumerable"/>. The contract of this
            interface requires that the enumerator returned from <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            produces either zero values, if the option is empty, or one value, if the option is full.
            Behavior is undefined if the enumerable produces more than one value.
            </para>
            </remarks>
            <seealso cref="T:Hgk.Zero.Options.IOpt`1"/>
        </member>
        <member name="T:Hgk.Zero.Options.IOpt`1">
            <summary>
            Generic type for options.
            </summary>
            <remarks>
            <para>
            <see cref="T:Hgk.Zero.Options.IOpt`1"/> implements <see cref="T:System.Collections.IEnumerable"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            The contract of this interface requires that the enumerators returned from <see
            cref="M:System.Collections.IEnumerable.GetEnumerator"/> and <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/> produce
            either zero values, if the option is empty, or one value, if the option is full. Behavior is
            undefined if the enumerable produces more than one value.
            </para>
            </remarks>
            <typeparam name="T">The type of value that may be contained in this option.</typeparam>
            <seealso cref="T:Hgk.Zero.Options.IOpt"/>
        </member>
        <member name="T:Hgk.Zero.Options.IOptFixable">
            <summary>
            Type that can be directly fixed to an <see cref="T:System.Object"/>-valued instance of <see cref="T:Hgk.Zero.Options.Opt`1"/>.
            </summary>
        </member>
        <member name="T:Hgk.Zero.Options.IOptFixable`1">
            <summary>
            Type that can be directly fixed to an instance of <see cref="T:Hgk.Zero.Options.Opt`1"/>.
            </summary>
        </member>
        <member name="T:Hgk.Zero.Options.ISingleResultOpt">
            <summary>
            Type for results of a single-element filter operation which represents a result count of
            zero, one, or more than one element.
            </summary>
            <remarks>
            <para>
            <see cref="T:Hgk.Zero.Options.ISingleResultOpt"/> is a supertype of <see cref="T:Hgk.Zero.Options.ISingleResultOpt`1"/>, the type
            returned by the single-element filter operations <see
            cref="M:Hgk.Zero.Options.Query.EnumerableToOpt.SingleToOpt``1(System.Collections.Generic.IEnumerable{``0})"/> and <see
            cref="M:Hgk.Zero.Options.Query.EnumerableToOpt.SingleToOpt``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>. If
            such an operation finds zero elements or one element, a single-result option behaves the same
            as an ordinary <see cref="T:Hgk.Zero.Options.IOpt"/>. However, if such an operation finds more than one element,
            it behaves differently:
            </para>
            <list type="bullet">
            <item>
            Resolving a single-result option as an ordinary option ( <see cref="T:Hgk.Zero.Options.IOpt"/>) or enumerable (
            <see cref="T:System.Collections.IEnumerable"/>) will result in an <see cref="T:System.InvalidOperationException"/>.
            Operations that resolve immediately (such as a <see langword="foreach"/> loop or <see
            cref="M:Hgk.Zero.Options.Opt.ToFixed(Hgk.Zero.Options.IOpt)"/>) will cause the exception to be thrown immediately, while deferred
            operations (such as <see cref="M:Hgk.Zero.Options.Opt.OfType``1(Hgk.Zero.Options.IOpt)"/>) will cause the exception to be
            thrown when they are resolved themselves.
            </item>
            <item>
            Explicit operations such as <see cref="M:Hgk.Zero.Options.ISingleResultOpt.Match``1(System.Func{``0},System.Func{System.Object,``0},System.Func{``0})"/> can be used to convert a single-result option to another kind of value
            without throwing an exception.
            </item>
            </list>
            <para>The following is information about the contract for this interface.</para>
            <list type="bullet">
            <item>
            <see cref="M:Hgk.Zero.Options.ISingleResultOpt.Match``1(System.Func{``0},System.Func{System.Object,``0},System.Func{``0})"/> must be
            implemented as specified.
            </item>
            <item>
            <see cref="T:Hgk.Zero.Options.ISingleResultOpt"/> implements <see cref="T:System.Collections.IEnumerable"/>. The contract of this
            interface requires that the enumerator returned from <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            behave as follows:
            <list type="bullet">
            <item>If the operation produced no elements, the enumeration produces zero elements.</item>
            <item>If the operation produced one element, the enumeration produces that one element.</item>
            <item>
            If the operation produced more than one element, the enumeration throws <see
            cref="T:System.InvalidOperationException"/> instead of producing any elements. (The throwing of the
            exception should be deferred to the first <see cref="M:System.Collections.IEnumerator.MoveNext"/> rather than
            occurring immediately.)
            </item>
            </list>
            <para>Behavior is undefined if the enumerable produces more than one value.</para>
            </item>
            </list>
            </remarks>
            <seealso cref="T:Hgk.Zero.Options.ISingleResultOpt`1"/>
        </member>
        <member name="M:Hgk.Zero.Options.ISingleResultOpt.Match``1(System.Func{``0},System.Func{System.Object,``0},System.Func{``0})">
            <summary>
            Converts this single result option to another value based on its contents.
            </summary>
            <typeparam name="TResult">The result type for this conversion.</typeparam>
            <param name="ifZero">
            A function to produce the result if this single result option represents a result of zero elements.
            </param>
            <param name="ifOne">
            A function to produce the result if this single result option represents a result of one
            element, which accepts that element as a parameter.
            </param>
            <param name="ifMoreThanOne">
            A function to produce the result if this single result option represents a result of more
            than one element.
            </param>
            <returns>
            The result of calling <paramref name="ifZero"/>, <paramref name="ifOne"/>, or <paramref
            name="ifMoreThanOne"/> if this single result option represents a result of zero, one, or
            more than one element, respectively.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="ifZero"/> is <see langword="null"/> and this single result option
            represents a result of zero elements, or <paramref name="ifOne"/> is <see
            langword="null"/> and this single result option represents a result of one element, or
            <paramref name="ifMoreThanOne"/> is <see langword="null"/> and this single result option
            represents a result of more than one element.
            </exception>
        </member>
        <member name="T:Hgk.Zero.Options.ISingleResultOpt`1">
            <summary>
            Generic type for results of a single-element filter operation which represents a result count
            of zero, one, or more than one element.
            </summary>
            <remarks>
            <para>
            <see cref="T:Hgk.Zero.Options.ISingleResultOpt`1"/> is the type returned by the single-element filter
            operations <see cref="M:Hgk.Zero.Options.Query.EnumerableToOpt.SingleToOpt``1(System.Collections.Generic.IEnumerable{``0})"/> and <see
            cref="M:Hgk.Zero.Options.Query.EnumerableToOpt.SingleToOpt``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>. If
            such an operation finds zero elements or one element, a single-result option behaves the same
            as an ordinary <see cref="T:Hgk.Zero.Options.IOpt`1"/>. However, if such an operation finds more than one
            element, it behaves differently:
            </para>
            <list type="bullet">
            <item>
            Resolving a single-result option as an ordinary option ( <see cref="T:Hgk.Zero.Options.IOpt"/> or <see
            cref="T:Hgk.Zero.Options.IOpt`1"/>) or enumerable ( <see cref="T:System.Collections.IEnumerable"/> or <see cref="T:System.Collections.Generic.IEnumerable`1"/>)
            will result in an <see cref="T:System.InvalidOperationException"/>. Operations that resolve
            immediately (such as a <see langword="foreach"/> loop or <see
            cref="M:Hgk.Zero.Options.Opt.ToFixed``1(Hgk.Zero.Options.IOpt{``0})"/>) will cause the exception to be thrown
            immediately, while deferred operations (such as <see cref="M:Hgk.Zero.Options.Opt.Select``2(Hgk.Zero.Options.IOpt{``0},System.Func{``0,``1})"/>) will cause the exception to be thrown
            when they are resolved themselves.
            </item>
            <item>
            Explicit operations such as <see cref="M:Hgk.Zero.Options.ISingleResultOpt`1.Match``1(System.Func{``0},System.Func{`0,``0},System.Func{``0})"/> and methods from <see cref="T:Hgk.Zero.Options.SingleResultOpt"/> such as <see
            cref="M:Hgk.Zero.Options.SingleResultOpt.EmptyIfMoreThanOne``1(Hgk.Zero.Options.ISingleResultOpt{``0})"/> can be used
            to convert a single-result option to another kind of value without throwing an exception.
            </item>
            </list>
            <para>The following is information about the contract for this interface.</para>
            <list type="bullet">
            <item>The interface <see cref="T:Hgk.Zero.Options.ISingleResultOpt"/> must be implemented as specified.</item>
            <item>
            <see cref="M:Hgk.Zero.Options.ISingleResultOpt`1.Match``1(System.Func{``0},System.Func{`0,``0},System.Func{``0})"/> must be
            implemented as specified.
            </item>
            <item>
            <see cref="T:Hgk.Zero.Options.ISingleResultOpt`1"/> implements <see cref="T:System.Collections.IEnumerable"/> and <see
            cref="T:System.Collections.Generic.IEnumerable`1"/>. The contract of this interface requires that the enumerator returned
            from <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> and <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
            behave as follows:
            <list type="bullet">
            <item>If the operation produced no elements, the enumeration produces zero elements.</item>
            <item>If the operation produced one element, the enumeration produces that one element.</item>
            <item>
            If the operation produced more than one element, the enumeration throws <see
            cref="T:System.InvalidOperationException"/> instead of producing any elements. (The throwing of the
            exception should be deferred to the first <see cref="M:System.Collections.IEnumerator.MoveNext"/> rather than
            occurring immediately.)
            </item>
            </list>
            <para>Behavior is undefined if the enumerable produces more than one value.</para>
            </item>
            </list>
            </remarks>
            <typeparam name="T">The type of value that may be contained in this option.</typeparam>
            <seealso cref="T:Hgk.Zero.Options.ISingleResultOpt"/>
            <seealso cref="M:Hgk.Zero.Options.Query.EnumerableToOpt.SingleToOpt``1(System.Collections.Generic.IEnumerable{``0})"/>
            <seealso cref="M:Hgk.Zero.Options.Query.EnumerableToOpt.SingleToOpt``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>
        </member>
        <member name="M:Hgk.Zero.Options.ISingleResultOpt`1.Match``1(System.Func{``0},System.Func{`0,``0},System.Func{``0})">
            <summary>
            Converts this single result option to another value based on its contents.
            </summary>
            <typeparam name="TResult">The result type for this conversion.</typeparam>
            <param name="ifZero">
            A function to produce the result if this single result option represents a result of zero elements.
            </param>
            <param name="ifOne">
            A function to produce the result if this single result option represents a result of one
            element, which accepts that element as a parameter.
            </param>
            <param name="ifMoreThanOne">
            A function to produce the result if this single result option represents a result of more
            than one element.
            </param>
            <returns>
            The result of calling <paramref name="ifZero"/>, <paramref name="ifOne"/>, or <paramref
            name="ifMoreThanOne"/> if this single result option represents a result of zero, one, or
            more than one element, respectively.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="ifZero"/> is <see langword="null"/> and this single result option
            represents a result of zero elements, or <paramref name="ifOne"/> is <see
            langword="null"/> and this single result option represents a result of one element, or
            <paramref name="ifMoreThanOne"/> is <see langword="null"/> and this single result option
            represents a result of more than one element.
            </exception>
        </member>
        <member name="T:Hgk.Zero.Options.ISingleResultOptFixable">
            <summary>
            Type that can be directly fixed to an <see cref="T:System.Object"/>-valued instance of <see cref="T:Hgk.Zero.Options.FixedSingleResultOpt`1"/>.
            </summary>
        </member>
        <member name="T:Hgk.Zero.Options.ISingleResultOptFixable`1">
            <summary>
            Type that can be directly fixed to an instance of <see cref="T:Hgk.Zero.Options.FixedSingleResultOpt`1"/>.
            </summary>
        </member>
        <member name="T:Hgk.Zero.Options.MetaSelectOpt`2">
            <summary>
            A complete deferred option based on the result of transforming an <see cref="T:Hgk.Zero.Options.Opt`1"/> to a
            new <see cref="T:Hgk.Zero.Options.Opt`1"/> (use <see cref="M:Hgk.Zero.Options.Opt.MetaSelect``2(Hgk.Zero.Options.IOpt{``0},System.Func{Hgk.Zero.Options.Opt{``0},Hgk.Zero.Options.Opt{``1}})"/> to instantiate).
            </summary>
        </member>
        <member name="T:Hgk.Zero.Options.Opt`1">
            <summary>
            Type for immutable options.
            </summary>
            <typeparam name="T">Contained type for options of this type.</typeparam>
        </member>
        <member name="F:Hgk.Zero.Options.Opt`1.ValueOrDefault">
            <summary>
            The value contained by this option, if <see cref="P:Hgk.Zero.Options.Opt`1.HasValue"/> is <see langword="true"/>;
            otherwise, the default value of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Hgk.Zero.Options.Opt`1.#ctor(System.Boolean,`0)">
            <summary>
            Creates an immutable option. Instead of this, use <see cref="M:Hgk.Zero.Options.Opt.Create``1(System.Boolean,``0)"/>,
            <see cref="M:Hgk.Zero.Options.Opt.Create``1(``0)"/>, <see cref="M:Hgk.Zero.Options.Opt.Create``1(System.Nullable{``0})"/>, <see
            cref="M:Hgk.Zero.Options.Opt.Full``1(``0)"/>, or <see cref="M:Hgk.Zero.Options.Opt.Empty``1"/> where applicable.
            </summary>
        </member>
        <member name="P:Hgk.Zero.Options.Opt`1.HasValue">
            <summary>
            Gets whether this option contains a value.
            </summary>
        </member>
        <member name="P:Hgk.Zero.Options.Opt`1.Value">
            <summary>
            Gets the value contained by this option.
            </summary>
            <exception cref="T:System.InvalidOperationException">This option is empty.</exception>
        </member>
        <member name="M:Hgk.Zero.Options.Opt`1.Equals(System.Object)">
            <summary>
            Gets whether this option is equal to another object.
            </summary>
            <remarks>
            <para>This option is equal to another object if:</para>
            <list type="bullet">
            <item>the other object is not <see langword="null"/> and</item>
            <item>the other object is an instance of <see cref="T:Hgk.Zero.Options.IOpt"/> and</item>
            <item>
            either
            <list type="bullet">
            <item>this option is empty and the other option is also empty, or</item>
            <item>
            this option is full, the other option is full, and the contained values of this option
            and the other option are equal (by <see cref="M:System.Object.Equals(System.Object,System.Object)"/>).
            </item>
            </list>
            </item>
            </list>
            <para>
            If <paramref name="obj"/> is an <see cref="T:Hgk.Zero.Options.ISingleResultOpt"/> that represents a result
            of more than one element, this returns <see langword="false"/> (rather than throwing an exception).
            </para>
            </remarks>
            <param name="obj">An object to compare this option to.</param>
            <returns>
            <see langword="true"/> if this option equals <paramref name="obj"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Hgk.Zero.Options.Opt`1.GetHashCode">
            <summary>
            Gets a hash code for this object based on its contents.
            </summary>
            <returns>A hash code for this option.</returns>
        </member>
        <member name="M:Hgk.Zero.Options.Opt`1.ToString">
            <summary>
            Gets a string representation for this option.
            </summary>
            <returns>A string representation for this option.</returns>
        </member>
        <member name="T:Hgk.Zero.Options.OptEnumerator`1">
            <summary>
            Enumerator that defers evaluation of the contained option until the first MoveNext. (Reset is
            supported; if used, the option will be reevaluated.)
            </summary>
        </member>
        <member name="T:Hgk.Zero.Options.Opt">
            <summary>
            Facilities to create and manipulate options.
            </summary>
            <remarks>
            <para>
            This class contains a large number of LINQ-compatible methods. While all options are also
            enumerables, and can therefore be used with methods provided by <see cref="T:System.Linq.Enumerable"/>,
            most of the operators are specialized here for options in order to optimize the algorithms
            for use with zero- or one-element collections (such as <see
            cref="M:Hgk.Zero.Options.Opt.Distinct``1(Hgk.Zero.Options.IOpt{``0})"/>), and also to return options from operations
            guaranteed to return at most one element when performed on an option (such as <see
            cref="M:Hgk.Zero.Options.Opt.Zip``3(Hgk.Zero.Options.IOpt{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})"/>). In general, the result of applying any LINQ operation in this class
            to an option is defined to be sequence-equal to the result of applying the same operation
            from <see cref="T:System.Linq.Enumerable"/> to the same option.
            </para>
            <para>
            Similarly to the methods in <see cref="T:System.Linq.Enumerable"/>, most option-returning methods in this
            class are implemented using deferred execution; that is, the query represented by the method
            is not actually executed until the contents of the result are resolved directly, for example,
            by enumeration, using foreach, or calling a method such as <see
            cref="M:Hgk.Zero.Options.Opt.ToFixed``1(Hgk.Zero.Options.IOpt{``0})"/> or <see cref="M:Hgk.Zero.Options.Opt.Match``2(Hgk.Zero.Options.IOpt{``0},System.Func{``1},System.Func{``0,``1})"/>.
            </para>
            <para>
            Some methods instead use or return <see cref="T:Hgk.Zero.Options.Opt`1"/>, which is a type for fixed, immutable
            options. The contents of these are immediate and not deferred.
            </para>
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.AsIOpt``1(Hgk.Zero.Options.IOpt{``0})">
            <summary>
            Returns this option typed as <see cref="T:Hgk.Zero.Options.IOpt`1"/>.
            </summary>
            <typeparam name="TSource">The element type of <paramref name="source"/>.</typeparam>
            <param name="source">An option to type as <see cref="T:Hgk.Zero.Options.IOpt`1"/>.</param>
            <returns><paramref name="source"/>, typed as <see cref="T:Hgk.Zero.Options.IOpt`1"/>.</returns>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Create``1(System.Nullable{``0})">
            <summary>
            Creates a fixed option with the same contents as the specified <see cref="T:System.Nullable`1"/>.
            </summary>
            <typeparam name="T">The non-nullable basis type of <paramref name="value"/>.</typeparam>
            <param name="value">The value to be contained in the new option, if not <see langword="null"/>.</param>
            <returns>
            An option that contains the <see cref="P:System.Nullable`1.Value"/> of <paramref name="value"/>,
            if present; otherwise, an empty option.
            </returns>
            <seealso cref="M:Hgk.Zero.Options.Opt.Create``1(``0)"/>
            <seealso cref="M:Hgk.Zero.Options.Opt.Empty``1"/>
            <seealso cref="M:Hgk.Zero.Options.Opt.Full``1(``0)"/>
            <seealso cref="M:Hgk.Zero.Options.Opt.Create``1(System.Boolean,``0)"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Create``1(``0)">
            <summary>
            Creates a fixed option which contains the specified value, if it is not <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of <paramref name="value"/>.</typeparam>
            <param name="value">The value to be contained in the new option, if not <see langword="null"/>.</param>
            <returns>
            An option that contains <paramref name="value"/> if it is not <see langword="null"/>;
            otherwise, an empty option.
            </returns>
            <seealso cref="M:Hgk.Zero.Options.Opt.Create``1(System.Nullable{``0})"/>
            <seealso cref="M:Hgk.Zero.Options.Opt.Empty``1"/>
            <seealso cref="M:Hgk.Zero.Options.Opt.Full``1(``0)"/>
            <seealso cref="M:Hgk.Zero.Options.Opt.Create``1(System.Boolean,``0)"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Create``1(System.Boolean,``0)">
            <summary>
            Creates a fixed option which contains the specified value, if a flag is set.
            </summary>
            <typeparam name="T">The type of <paramref name="value"/>.</typeparam>
            <param name="hasValue">A flag to determine whether to produce a full option.</param>
            <param name="value">
            The value to be contained in the new option, if <paramref name="hasValue"/> is <see langword="true"/>.
            </param>
            <returns>
            An option that contains <paramref name="value"/>, if <paramref name="hasValue"/> is <see
            langword="true"/>; otherwise, an empty option.
            </returns>
            <seealso cref="M:Hgk.Zero.Options.Opt.Create``1(``0)"/>
            <seealso cref="M:Hgk.Zero.Options.Opt.Create``1(System.Nullable{``0})"/>
            <seealso cref="M:Hgk.Zero.Options.Opt.Empty``1"/>
            <seealso cref="M:Hgk.Zero.Options.Opt.Full``1(``0)"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Empty``1">
            <summary>
            Creates a fixed, empty option.
            </summary>
            <typeparam name="T">The element type of the new option.</typeparam>
            <returns>An empty option.</returns>
            <seealso cref="M:Hgk.Zero.Options.Opt.Full``1(``0)"/>
            <seealso cref="M:Hgk.Zero.Options.Opt.Create``1(``0)"/>
            <seealso cref="M:Hgk.Zero.Options.Opt.Create``1(System.Nullable{``0})"/>
            <seealso cref="M:Hgk.Zero.Options.Opt.Create``1(System.Boolean,``0)"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Flatten``1(Hgk.Zero.Options.IOpt{Hgk.Zero.Options.IOpt{``0}})">
            <summary>
            Collapses an option containing another option into a single option.
            </summary>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
            <typeparam name="TSource">The element type of the inner option.</typeparam>
            <param name="source">An outer option containing an inner option option.</param>
            <returns>
            An option equivalent to the inner option, if it exists; otherwise, an empty option.
            </returns>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Flatten``1(Hgk.Zero.Options.IOpt{Hgk.Zero.Options.Opt{``0}})">
            <summary>
            Collapses an option containing another option into a single option.
            </summary>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
            <typeparam name="TSource">The element type of the inner option.</typeparam>
            <param name="source">An outer option containing an inner option option.</param>
            <returns>
            An option equivalent to the inner option, if it exists; otherwise, an empty option.
            </returns>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Full``1(``0)">
            <summary>
            Creates a fixed option that contains the specified value (even if the value is <see langword="null"/>).
            </summary>
            <typeparam name="T">The type of <paramref name="value"/>.</typeparam>
            <param name="value">The value to be contained in the new option.</param>
            <returns>An option that contains <paramref name="value"/>.</returns>
            <seealso cref="M:Hgk.Zero.Options.Opt.Empty``1"/>
            <seealso cref="M:Hgk.Zero.Options.Opt.Create``1(``0)"/>
            <seealso cref="M:Hgk.Zero.Options.Opt.Create``1(System.Nullable{``0})"/>
            <seealso cref="M:Hgk.Zero.Options.Opt.Create``1(System.Boolean,``0)"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Match``2(Hgk.Zero.Options.IOpt{``0},System.Func{``1},System.Func{``0,``1})">
            <summary>
            Converts this option to another value based on its contents.
            </summary>
            <remarks>
            <para>
            This operation is performed immediately rather than by deferred execution. Compare <see
            cref="M:Hgk.Zero.Options.Opt.MatchOpt``2(Hgk.Zero.Options.IOpt{``0},System.Func{Hgk.Zero.Options.Opt{``1}},System.Func{``0,Hgk.Zero.Options.Opt{``1}})"/>, which uses deferred execution.
            </para>
            </remarks>
            <typeparam name="TSource">The element type of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The result type for this conversion.</typeparam>
            <param name="source">A source option.</param>
            <param name="ifEmpty">A function to produce the result if this option is empty.</param>
            <param name="ifFull">
            A function to produce the result if this option is full, which accepts the contained
            element as a parameter.
            </param>
            <returns>
            The result of calling <paramref name="ifEmpty"/>, if this option is empty; otherwise, the
            result of calling <paramref name="ifFull"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="ifEmpty"/> is <see langword="null"/> and this option is empty, or
            <paramref name="ifFull"/> is <see langword="null"/> and this option is full.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.MatchOpt``2(Hgk.Zero.Options.IOpt{``0},System.Func{Hgk.Zero.Options.Opt{``1}},System.Func{``0,Hgk.Zero.Options.Opt{``1}})">
            <summary>
            Converts this option to another option based on its contents.
            </summary>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            <para>Compare <see cref="M:Hgk.Zero.Options.Opt.Match``2(Hgk.Zero.Options.IOpt{``0},System.Func{``1},System.Func{``0,``1})"/>, which uses immediate execution.</para>
            </remarks>
            <typeparam name="TSource">The element type of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The element type for the result of this conversion.</typeparam>
            <param name="source">A source option.</param>
            <param name="ifEmpty">A function to produce the result if this option is empty.</param>
            <param name="ifFull">
            A function to produce the result if this option is full, which accepts the contained
            element as a parameter.
            </param>
            <returns>
            An option equivalent to the result of calling <paramref name="ifEmpty"/>, if this option
            is empty; otherwise, an option equivalent to the result of calling <paramref name="ifFull"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="ifEmpty"/> is <see langword="null"/> and this option is empty, or
            <paramref name="ifFull"/> is <see langword="null"/> and this option is full.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.ToFixed(Hgk.Zero.Options.IOpt)">
            <summary>
            Returns a fixed option reflecting the current state of an option.
            </summary>
            <param name="source">A source option.</param>
            <returns>A fixed option reflecting the current state of <paramref name="source"/>.</returns>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.ToFixed``1(Hgk.Zero.Options.IOpt{``0})">
            <summary>
            Returns a fixed option reflecting the current state of an option.
            </summary>
            <typeparam name="TSource">The element type of <paramref name="source"/>.</typeparam>
            <param name="source">A source option.</param>
            <returns>A fixed option reflecting the current state of <paramref name="source"/>.</returns>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.TryGetValue``1(Hgk.Zero.Options.IOpt{``0},``0@)">
            <summary>
            Gets the value contained by an option, if it exists.
            </summary>
            <typeparam name="TSource">The element type of source.</typeparam>
            <param name="source">An option whose value to get.</param>
            <param name="value">
            When this method returns, is set to the value contained by <paramref name="source"/>, if
            any, or the default value of <typeparamref name="TSource"/>, otherwise.
            </param>
            <returns><see langword="true"/>, if source contains a value; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Aggregate``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,``0,``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Aggregate``2(Hgk.Zero.Options.IOpt{``0},``1,System.Func{``1,``0,``1})">
            <inheritdoc cref="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Aggregate``3(Hgk.Zero.Options.IOpt{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
            <inheritdoc cref="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.All``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Any``1(Hgk.Zero.Options.IOpt{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Any``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Average``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Int64})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Average``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Average``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Nullable{System.Double}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Average``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Single})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Average``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Average``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Nullable{System.Single}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Average``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Int32})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Average``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Average``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Double})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Average``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Decimal})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Average(Hgk.Zero.Options.IOpt{System.Decimal})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Average(Hgk.Zero.Options.IOpt{System.Single})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Average(Hgk.Zero.Options.IOpt{System.Int32})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Average(Hgk.Zero.Options.IOpt{System.Int64})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Average(Hgk.Zero.Options.IOpt{System.Nullable{System.Decimal}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Average(Hgk.Zero.Options.IOpt{System.Double})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Average(Hgk.Zero.Options.IOpt{System.Nullable{System.Int32}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Average(Hgk.Zero.Options.IOpt{System.Nullable{System.Int64}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Average(Hgk.Zero.Options.IOpt{System.Nullable{System.Single}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Average(Hgk.Zero.Options.IOpt{System.Nullable{System.Double}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Cast``1(Hgk.Zero.Options.IOpt)">
            <inheritdoc cref="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)"/>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            <para>
            If <paramref name="source"/> is already an <see cref="T:Hgk.Zero.Options.IOpt`1"/> with <typeparamref
            name="TResult"/> as its element type, it is returned unchanged.
            </para>
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Contains``1(Hgk.Zero.Options.IOpt{``0},``0)">
            <inheritdoc cref="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Contains``1(Hgk.Zero.Options.IOpt{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Count``1(Hgk.Zero.Options.IOpt{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Count``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.DefaultIfEmpty``1(Hgk.Zero.Options.IOpt{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})"/>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.DefaultIfEmpty``1(Hgk.Zero.Options.IOpt{``0},``0)">
            <inheritdoc cref="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)"/>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Distinct``1(Hgk.Zero.Options.IOpt{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})"/>
            <remarks>
            Since an option, by virtue of being a zero- or one-element sequence, never contains
            duplicate elements, this method returns <paramref name="source"/> unmodified (after
            ensuring that it is not <see langword="null"/>).
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Distinct``1(Hgk.Zero.Options.IOpt{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"/>
            <remarks>
            Since an option, by virtue of being a zero- or one-element sequence, never contains
            duplicate elements, this method returns <paramref name="source"/> unmodified (after
            ensuring that it is not <see langword="null"/>).
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.ElementAt``1(Hgk.Zero.Options.IOpt{``0},System.Int32)">
            <inheritdoc cref="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.ElementAtOrDefault``1(Hgk.Zero.Options.IOpt{``0},System.Int32)">
            <inheritdoc cref="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Except``1(Hgk.Zero.Options.IOpt{``0},System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Except``1(Hgk.Zero.Options.IOpt{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"/>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.First``1(Hgk.Zero.Options.IOpt{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.First``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.FirstOrDefault``1(Hgk.Zero.Options.IOpt{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.FirstOrDefault``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Intersect``1(Hgk.Zero.Options.IOpt{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"/>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Intersect``1(Hgk.Zero.Options.IOpt{``0},System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Last``1(Hgk.Zero.Options.IOpt{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Last``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.LastOrDefault``1(Hgk.Zero.Options.IOpt{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.LastOrDefault``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.LongCount``1(Hgk.Zero.Options.IOpt{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.LongCount``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Int32})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Int64})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Nullable{System.Double}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Single})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Nullable{System.Single}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Double})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Decimal})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max``2(Hgk.Zero.Options.IOpt{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max(Hgk.Zero.Options.IOpt{System.Single})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max(Hgk.Zero.Options.IOpt{System.Decimal})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max(Hgk.Zero.Options.IOpt{System.Double})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max(Hgk.Zero.Options.IOpt{System.Int32})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max(Hgk.Zero.Options.IOpt{System.Int64})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max``1(Hgk.Zero.Options.IOpt{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max(Hgk.Zero.Options.IOpt{System.Nullable{System.Double}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max(Hgk.Zero.Options.IOpt{System.Nullable{System.Int32}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max(Hgk.Zero.Options.IOpt{System.Nullable{System.Int64}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max(Hgk.Zero.Options.IOpt{System.Nullable{System.Single}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Max(Hgk.Zero.Options.IOpt{System.Nullable{System.Decimal}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Int32})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min``2(Hgk.Zero.Options.IOpt{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Single})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Nullable{System.Single}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Nullable{System.Double}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Int64})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Decimal})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Double})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min(Hgk.Zero.Options.IOpt{System.Single})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min(Hgk.Zero.Options.IOpt{System.Nullable{System.Single}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min(Hgk.Zero.Options.IOpt{System.Nullable{System.Int64}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min(Hgk.Zero.Options.IOpt{System.Nullable{System.Int32}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min(Hgk.Zero.Options.IOpt{System.Nullable{System.Double}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min(Hgk.Zero.Options.IOpt{System.Nullable{System.Decimal}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min(Hgk.Zero.Options.IOpt{System.Int64})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min(Hgk.Zero.Options.IOpt{System.Int32})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min(Hgk.Zero.Options.IOpt{System.Double})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min(Hgk.Zero.Options.IOpt{System.Decimal})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Min``1(Hgk.Zero.Options.IOpt{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.OfType``1(Hgk.Zero.Options.IOpt)">
            <inheritdoc cref="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)"/>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            <para>
            If <paramref name="source"/> is already an <see cref="T:Hgk.Zero.Options.IOpt`1"/> with <typeparamref
            name="TResult"/> as its element type, it is returned unchanged.
            </para>
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Reverse``1(Hgk.Zero.Options.IOpt{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})"/>
            <remarks>
            Since an option, by virtue of being a zero- or one-element sequence, is its own reverse,
            this method returns <paramref name="source"/> unmodified (after ensuring that it is not
            <see langword="null"/>).
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Select``2(Hgk.Zero.Options.IOpt{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Select``2(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Int32,``1})">
            <inheritdoc cref="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})"/>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.SequenceEqual``1(Hgk.Zero.Options.IOpt{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.SequenceEqual``1(Hgk.Zero.Options.IOpt{``0},System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Single``1(Hgk.Zero.Options.IOpt{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Single``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.SingleOrDefault``1(Hgk.Zero.Options.IOpt{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.SingleOrDefault``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Skip``1(Hgk.Zero.Options.IOpt{``0},System.Int32)">
            <inheritdoc cref="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.SkipWhile``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.SkipWhile``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Int32,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})"/>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Sum``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Sum``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Int32})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Sum``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Int64})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Sum``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Sum``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Single})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Sum``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Nullable{System.Single}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Sum``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Double})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Sum``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Sum``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Decimal})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Sum``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Nullable{System.Double}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Sum(Hgk.Zero.Options.IOpt{System.Nullable{System.Single}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Sum(Hgk.Zero.Options.IOpt{System.Nullable{System.Int64}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Sum(Hgk.Zero.Options.IOpt{System.Nullable{System.Int32}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Sum(Hgk.Zero.Options.IOpt{System.Nullable{System.Double}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Sum(Hgk.Zero.Options.IOpt{System.Nullable{System.Decimal}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Sum(Hgk.Zero.Options.IOpt{System.Single})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Sum(Hgk.Zero.Options.IOpt{System.Int64})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Sum(Hgk.Zero.Options.IOpt{System.Int32})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Sum(Hgk.Zero.Options.IOpt{System.Double})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Sum(Hgk.Zero.Options.IOpt{System.Decimal})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Take``1(Hgk.Zero.Options.IOpt{``0},System.Int32)">
            <inheritdoc cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.TakeWhile``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.TakeWhile``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Int32,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})"/>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.ToArray``1(Hgk.Zero.Options.IOpt{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.ToList``1(Hgk.Zero.Options.IOpt{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Where``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Int32,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})"/>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Where``1(Hgk.Zero.Options.IOpt{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
        </member>
        <member name="M:Hgk.Zero.Options.Opt.Zip``3(Hgk.Zero.Options.IOpt{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <inheritdoc cref="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})"/>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
        </member>
        <member name="T:Hgk.Zero.Options.Query.DictionaryToOpt">
            <summary>
            Facility for retrieving a value from a dictionary as an option.
            </summary>
        </member>
        <member name="M:Hgk.Zero.Options.Query.DictionaryToOpt.GetValueOpt``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value associated with a specified key as an option.
            </summary>
            <typeparam name="TKey">The type of the keys in <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of the values in <paramref name="source"/>.</typeparam>
            <param name="source">A source dictionary.</param>
            <param name="key">The key whose value to get.</param>
            <returns>
            An option containing the value associated with <paramref name="key"/> in <paramref
            name="source"/>, if it is found; otherwise, an empty option.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="key"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Query.DictionaryToOpt.GetValueOpt``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
            <summary>
            Gets the value associated with a specified key as an option.
            </summary>
            <typeparam name="TKey">The type of the keys in <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of the values in <paramref name="source"/>.</typeparam>
            <param name="source">A source dictionary.</param>
            <param name="key">The key whose value to get.</param>
            <returns>
            An option containing the value associated with <paramref name="key"/> in <paramref
            name="source"/>, if it is found; otherwise, an empty option.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="key"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Hgk.Zero.Options.Query.EnumerableToOpt">
            <summary>
            Facilities for narrowing an existing enumerable to an option value.
            </summary>
        </member>
        <member name="M:Hgk.Zero.Options.Query.EnumerableToOpt.ElementAtToOpt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns an option that contains the element of a sequence at the specified index.
            </summary>
            <remarks>
            <para>
            This method is an option-returning counterpart to <see
            cref="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>.
            </para>
            <para>This method is implemented using deferred execution; the query represented by this method is not performed until the contents of the returned option are resolved, such as by enumeration.</para>
            </remarks>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">A source sequence.</param>
            <param name="index">The zero-based index of the element in source to retrieve.</param>
            <returns>
            An option containing the element of <paramref name="source"/> at the index <paramref
            name="index"/>, or an empty option if index is out of range.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Hgk.Zero.Options.Query.EnumerableToOpt.FirstToOpt``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an option that contains the first element of a sequence.
            </summary>
            <remarks>
            <para>This method is an option-returning counterpart to <see cref="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})"/>.</para>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">A source sequence.</param>
            <returns>
            An option containing the first element of <paramref name="source"/>, or an empty option
            if <paramref name="source"/> is empty.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Hgk.Zero.Options.Query.EnumerableToOpt.FirstToOpt``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns an option that contains the first element of a sequence that satisfies a predicate.
            </summary>
            <remarks>
            <para>
            This method is an option-returning counterpart to <see
            cref="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>.
            </para>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">A source sequence.</param>
            <param name="predicate">A function to test elements of <paramref name="source"/>.</param>
            <returns>
            An option containing the first element of <paramref name="source"/> that satisfies
            predicate, or an empty option if no such element exists.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or predicate is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Query.EnumerableToOpt.LastToOpt``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an option that contains the last element of a sequence.
            </summary>
            <remarks>
            <para>This method is an option-returning counterpart to <see cref="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})"/>.</para>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">A source sequence.</param>
            <returns>
            An option containing the last element of <paramref name="source"/>, or an empty option if
            <paramref name="source"/> is empty.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Hgk.Zero.Options.Query.EnumerableToOpt.LastToOpt``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns an option that contains the last element of a sequence that satisfies a predicate.
            </summary>
            <remarks>
            <para>
            This method is an option-returning counterpart to <see
            cref="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>.
            </para>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">A source sequence.</param>
            <param name="predicate">A function to test elements of <paramref name="source"/>.</param>
            <returns>
            An option containing the last element of <paramref name="source"/> that satisfies
            predicate, or an empty option if no such element exists.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or predicate is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Query.EnumerableToOpt.SingleToOpt``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an option that contains the only element of a sequence.
            </summary>
            <remarks>
            <para>This method is an option-returning counterpart to <see cref="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})"/>.</para>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            <para>
            This method returns a single result option ( <see cref="T:Hgk.Zero.Options.ISingleResultOpt`1"/>). If
            <paramref name="source"/> contains zero elements or one element, this option can be used
            as an ordinary option ( <see cref="T:Hgk.Zero.Options.IOpt`1"/>). If <paramref name="source"/> contains
            more than one element, enumerating or resolving this option as an ordinary option will
            result in an <see cref="T:System.InvalidOperationException"/> being thrown. Methods such as <see
            cref="M:Hgk.Zero.Options.ISingleResultOpt`1.Match``1(System.Func{``0},System.Func{`0,``0},System.Func{``0})"/> and <see
            cref="M:Hgk.Zero.Options.SingleResultOpt.ReplaceIfMoreThanOne``1(Hgk.Zero.Options.ISingleResultOpt{``0},Hgk.Zero.Options.IOpt{``0})"/> can be used to handle the more-than-one case without exceptions.
            </para>
            </remarks>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">A source sequence.</param>
            <returns>
            An option containing the only element of <paramref name="source"/>, or an empty option if
            <paramref name="source"/> is empty.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">
            Returned single result was resolved as an ordinary option, but <paramref name="source"/>
            contained more than one element.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Query.EnumerableToOpt.SingleToOpt``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns an option that contains the only element of a sequence that satisfies an exception.
            </summary>
            <remarks>
            <para>
            This method is an option-returning counterpart to <see
            cref="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>.
            </para>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            <para>
            This method returns a single result option ( <see cref="T:Hgk.Zero.Options.ISingleResultOpt`1"/>). If
            <paramref name="source"/> contains zero elements or one element that satisfies <paramref
            name="predicate"/>, this option can be used as an ordinary option ( <see
            cref="T:Hgk.Zero.Options.IOpt`1"/>). If <paramref name="source"/> contains more than one element that
            satisfies <paramref name="predicate"/>, enumerating or resolving this option as an
            ordinary option will result in an <see cref="T:System.InvalidOperationException"/> being thrown.
            Methods such as <see cref="M:Hgk.Zero.Options.ISingleResultOpt`1.Match``1(System.Func{``0},System.Func{`0,``0},System.Func{``0})"/> and <see
            cref="M:Hgk.Zero.Options.SingleResultOpt.ReplaceIfMoreThanOne``1(Hgk.Zero.Options.ISingleResultOpt{``0},Hgk.Zero.Options.IOpt{``0})"/> can be used to handle the more-than-one case without exceptions.
            </para>
            </remarks>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">A source sequence.</param>
            <param name="predicate">A function to test elements of <paramref name="source"/>.</param>
            <returns>
            An option containing the only element of <paramref name="source"/> that satisfies
            <paramref name="predicate"/>, or an empty option if there is no such element.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="predicate"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Returned single result was resolved as an ordinary option, but <paramref name="source"/>
            contained more than one element that satisfies <paramref name="predicate"/>.
            </exception>
        </member>
        <member name="T:Hgk.Zero.Options.Query.SetToOpt">
            <summary>
            Facility for retrieving a value from a set as an option.
            </summary>
        </member>
        <member name="M:Hgk.Zero.Options.Query.SetToOpt.GetValueOpt``1(System.Collections.Generic.HashSet{``0},``0)">
            <summary>
            Searches the set for a given value and returns an option containing the equal value it finds.
            </summary>
            <typeparam name="TSource">The type of elements in source.</typeparam>
            <param name="source">A source set.</param>
            <param name="equalValue">The value to search for.</param>
            <returns>
            An option containing the value from the set that the search found, or an empty option
            when the search yielded no match.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Hgk.Zero.Options.Query.SetToOpt.GetValueOpt``1(System.Collections.Generic.SortedSet{``0},``0)">
            <summary>
            Searches the set for a given value and returns an option containing the equal value it finds.
            </summary>
            <typeparam name="TSource">The type of elements in source.</typeparam>
            <param name="source">A source set.</param>
            <param name="equalValue">The value to search for.</param>
            <returns>
            An option containing the value from the set that the search found, or an empty option
            when the search yielded no match.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Hgk.Zero.Options.SingleResultOpt">
            <summary>
            Facilities to manipulate single result options.
            </summary>
            <seealso cref="T:Hgk.Zero.Options.ISingleResultOpt"/>
            <seealso cref="T:Hgk.Zero.Options.ISingleResultOpt`1"/>
            <seealso cref="M:Hgk.Zero.Options.Query.EnumerableToOpt.SingleToOpt``1(System.Collections.Generic.IEnumerable{``0})"/>
            <seealso cref="M:Hgk.Zero.Options.Query.EnumerableToOpt.SingleToOpt``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>
        </member>
        <member name="M:Hgk.Zero.Options.SingleResultOpt.EmptyIfMoreThanOne``1(Hgk.Zero.Options.ISingleResultOpt{``0})">
            <summary>
            Converts a single result option to another option, substituting an empty option if this
            option represents more than one result.
            </summary>
            <typeparam name="TSource">The element type of <paramref name="source"/>.</typeparam>
            <param name="source">A source single result option.</param>
            <returns>
            An option equivalent to <paramref name="source"/>, if it represents a result of zero or
            one element; otherwise, an empty option.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Hgk.Zero.Options.SingleResultOpt.MatchOpt``2(Hgk.Zero.Options.ISingleResultOpt{``0},System.Func{Hgk.Zero.Options.Opt{``1}},System.Func{``0,Hgk.Zero.Options.Opt{``1}},System.Func{Hgk.Zero.Options.Opt{``1}})">
            <summary>
            Converts a single result option to another option based on its contents.
            </summary>
            <remarks>
            <para>
            This method is implemented using deferred execution; the query represented by this method
            is not performed until the contents of the returned option are resolved, such as by enumeration.
            </para>
            </remarks>
            <typeparam name="TSource">The element type of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The element type of the result option for this conversion.</typeparam>
            <param name="source">A source single result option.</param>
            <param name="ifZero">
            A function to produce the result if <paramref name="source"/> represents a result of zero elements.
            </param>
            <param name="ifOne">
            A function to produce the result if <paramref name="source"/> represents a result of one
            element, which accepts that element as a parameter.
            </param>
            <param name="ifMoreThanOne">
            A function to produce the result if <paramref name="source"/> represents a result of more
            than one element.
            </param>
            <returns>
            An option equivalent to the result of calling <paramref name="ifZero"/>, <paramref
            name="ifOne"/>, or <paramref name="ifMoreThanOne"/> if <paramref name="source"/>
            represents a result of zero, one, or more than one element, respectively.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="ifZero"/> is <see langword="null"/> and <paramref name="source"/>
            represents a result of zero elements, or <paramref name="ifOne"/> is <see
            langword="null"/> and <paramref name="source"/> represents a result of one element, or
            <paramref name="ifMoreThanOne"/> is <see langword="null"/> and <paramref name="source"/>
            represents a result of more than one element.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.SingleResultOpt.ReplaceIfMoreThanOne``1(Hgk.Zero.Options.ISingleResultOpt{``0},System.Func{Hgk.Zero.Options.Opt{``0}})">
            <summary>
            Converts a single result option to another option, substituting the result of a callback
            if this option represents more than one result.
            </summary>
            <typeparam name="TSource">The element type of <paramref name="source"/>.</typeparam>
            <param name="source">A source single result option.</param>
            <param name="replacementFactory">
            A function to produce the result if <paramref name="source"/> represents a result of more
            than one element.
            </param>
            <returns>
            An option equivalent to <paramref name="source"/>, if it represents a result of zero or
            one element; otherwise, an option equivalent to the result of calling <paramref name="replacementFactory"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="replacementFactory"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.SingleResultOpt.ReplaceIfMoreThanOne``1(Hgk.Zero.Options.ISingleResultOpt{``0},Hgk.Zero.Options.IOpt{``0})">
            <summary>
            Converts a single result option to another option, substituting a specified option if
            this option represents more than one result.
            </summary>
            <typeparam name="TSource">The element type of <paramref name="source"/>.</typeparam>
            <param name="source">A source single result option.</param>
            <param name="replacement">
            An option to produce the result if <paramref name="source"/> represents a result of more
            than one element.
            </param>
            <returns>
            An option equivalent to <paramref name="source"/>, if it represents a result of zero or
            one element; otherwise, an option equivalent to <paramref name="replacement"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="replacement"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Hgk.Zero.Options.SingleResultQuantity">
            <summary>
            Indicates the number of elements found while performing a SingleToOpt operation ( <see
            cref="F:Hgk.Zero.Options.SingleResultQuantity.Zero"/>, <see cref="F:Hgk.Zero.Options.SingleResultQuantity.One"/>, or <see cref="F:Hgk.Zero.Options.SingleResultQuantity.MoreThanOne"/>).
            </summary>
        </member>
        <member name="T:Hgk.Zero.Options.Try.TryFunction`1">
            <summary>
            Delegate type for a basic try function with no additional parameters.
            </summary>
            <typeparam name="TResult">The type of the result parameter.</typeparam>
            <param name="result">
            When this method returns, the result of the operation, if it succeeded;
            otherwise, the default value of <typeparamref name="TResult"/>. This parameter
            is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the operation completed successfully; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Hgk.Zero.Options.Try.TryFunction`2">
            <summary>
            Delegate type for a basic try function with 1 additional parameter.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="TResult">The type of the result parameter.</typeparam>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="result">
            When this method returns, the result of the operation, if it succeeded;
            otherwise, the default value of <typeparamref name="TResult"/>. This parameter
            is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the operation completed successfully; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Hgk.Zero.Options.Try.TryFunction`3">
            <summary>
            Delegate type for a basic try function with 2 additional parameters.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="TResult">The type of the result parameter.</typeparam>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="result">
            When this method returns, the result of the operation, if it succeeded;
            otherwise, the default value of <typeparamref name="TResult"/>. This parameter
            is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the operation completed successfully; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Hgk.Zero.Options.Try.TryFunction`4">
            <summary>
            Delegate type for a basic try function with 3 additional parameters.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="TResult">The type of the result parameter.</typeparam>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="result">
            When this method returns, the result of the operation, if it succeeded;
            otherwise, the default value of <typeparamref name="TResult"/>. This parameter
            is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the operation completed successfully; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Hgk.Zero.Options.Try.TryFunction`5">
            <summary>
            Delegate type for a basic try function with 4 additional parameters.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="TResult">The type of the result parameter.</typeparam>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="result">
            When this method returns, the result of the operation, if it succeeded;
            otherwise, the default value of <typeparamref name="TResult"/>. This parameter
            is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the operation completed successfully; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Hgk.Zero.Options.Try.TryFunction`6">
            <summary>
            Delegate type for a basic try function with 5 additional parameters.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="TResult">The type of the result parameter.</typeparam>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="result">
            When this method returns, the result of the operation, if it succeeded;
            otherwise, the default value of <typeparamref name="TResult"/>. This parameter
            is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the operation completed successfully; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Hgk.Zero.Options.Try.TryFunction`7">
            <summary>
            Delegate type for a basic try function with 6 additional parameters.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <typeparam name="TResult">The type of the result parameter.</typeparam>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <param name="result">
            When this method returns, the result of the operation, if it succeeded;
            otherwise, the default value of <typeparamref name="TResult"/>. This parameter
            is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the operation completed successfully; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Hgk.Zero.Options.Try.TryFunction`8">
            <summary>
            Delegate type for a basic try function with 7 additional parameters.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <typeparam name="T7">The type of <paramref name="arg7"/>.</typeparam>
            <typeparam name="TResult">The type of the result parameter.</typeparam>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <param name="arg7">The seventh parameter to be passed to the try function.</param>
            <param name="result">
            When this method returns, the result of the operation, if it succeeded;
            otherwise, the default value of <typeparamref name="TResult"/>. This parameter
            is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the operation completed successfully; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Hgk.Zero.Options.Try.TryFunction`9">
            <summary>
            Delegate type for a basic try function with 8 additional parameters.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <typeparam name="T7">The type of <paramref name="arg7"/>.</typeparam>
            <typeparam name="T8">The type of <paramref name="arg8"/>.</typeparam>
            <typeparam name="TResult">The type of the result parameter.</typeparam>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <param name="arg7">The seventh parameter to be passed to the try function.</param>
            <param name="arg8">The eighth parameter to be passed to the try function.</param>
            <param name="result">
            When this method returns, the result of the operation, if it succeeded;
            otherwise, the default value of <typeparamref name="TResult"/>. This parameter
            is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the operation completed successfully; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Hgk.Zero.Options.Try.TryFunction`10">
            <summary>
            Delegate type for a basic try function with 9 additional parameters.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <typeparam name="T7">The type of <paramref name="arg7"/>.</typeparam>
            <typeparam name="T8">The type of <paramref name="arg8"/>.</typeparam>
            <typeparam name="T9">The type of <paramref name="arg9"/>.</typeparam>
            <typeparam name="TResult">The type of the result parameter.</typeparam>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <param name="arg7">The seventh parameter to be passed to the try function.</param>
            <param name="arg8">The eighth parameter to be passed to the try function.</param>
            <param name="arg9">The ninth parameter to be passed to the try function.</param>
            <param name="result">
            When this method returns, the result of the operation, if it succeeded;
            otherwise, the default value of <typeparamref name="TResult"/>. This parameter
            is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the operation completed successfully; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Hgk.Zero.Options.Try.TryFunction`11">
            <summary>
            Delegate type for a basic try function with 10 additional parameters.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <typeparam name="T7">The type of <paramref name="arg7"/>.</typeparam>
            <typeparam name="T8">The type of <paramref name="arg8"/>.</typeparam>
            <typeparam name="T9">The type of <paramref name="arg9"/>.</typeparam>
            <typeparam name="T10">The type of <paramref name="arg10"/>.</typeparam>
            <typeparam name="TResult">The type of the result parameter.</typeparam>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <param name="arg7">The seventh parameter to be passed to the try function.</param>
            <param name="arg8">The eighth parameter to be passed to the try function.</param>
            <param name="arg9">The ninth parameter to be passed to the try function.</param>
            <param name="arg10">The tenth parameter to be passed to the try function.</param>
            <param name="result">
            When this method returns, the result of the operation, if it succeeded;
            otherwise, the default value of <typeparamref name="TResult"/>. This parameter
            is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the operation completed successfully; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Hgk.Zero.Options.Try.TryFunction`12">
            <summary>
            Delegate type for a basic try function with 11 additional parameters.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <typeparam name="T7">The type of <paramref name="arg7"/>.</typeparam>
            <typeparam name="T8">The type of <paramref name="arg8"/>.</typeparam>
            <typeparam name="T9">The type of <paramref name="arg9"/>.</typeparam>
            <typeparam name="T10">The type of <paramref name="arg10"/>.</typeparam>
            <typeparam name="T11">The type of <paramref name="arg11"/>.</typeparam>
            <typeparam name="TResult">The type of the result parameter.</typeparam>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <param name="arg7">The seventh parameter to be passed to the try function.</param>
            <param name="arg8">The eighth parameter to be passed to the try function.</param>
            <param name="arg9">The ninth parameter to be passed to the try function.</param>
            <param name="arg10">The tenth parameter to be passed to the try function.</param>
            <param name="arg11">The eleventh parameter to be passed to the try function.</param>
            <param name="result">
            When this method returns, the result of the operation, if it succeeded;
            otherwise, the default value of <typeparamref name="TResult"/>. This parameter
            is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the operation completed successfully; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Hgk.Zero.Options.Try.TryFunction`13">
            <summary>
            Delegate type for a basic try function with 12 additional parameters.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <typeparam name="T7">The type of <paramref name="arg7"/>.</typeparam>
            <typeparam name="T8">The type of <paramref name="arg8"/>.</typeparam>
            <typeparam name="T9">The type of <paramref name="arg9"/>.</typeparam>
            <typeparam name="T10">The type of <paramref name="arg10"/>.</typeparam>
            <typeparam name="T11">The type of <paramref name="arg11"/>.</typeparam>
            <typeparam name="T12">The type of <paramref name="arg12"/>.</typeparam>
            <typeparam name="TResult">The type of the result parameter.</typeparam>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <param name="arg7">The seventh parameter to be passed to the try function.</param>
            <param name="arg8">The eighth parameter to be passed to the try function.</param>
            <param name="arg9">The ninth parameter to be passed to the try function.</param>
            <param name="arg10">The tenth parameter to be passed to the try function.</param>
            <param name="arg11">The eleventh parameter to be passed to the try function.</param>
            <param name="arg12">The twelfth parameter to be passed to the try function.</param>
            <param name="result">
            When this method returns, the result of the operation, if it succeeded;
            otherwise, the default value of <typeparamref name="TResult"/>. This parameter
            is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the operation completed successfully; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Hgk.Zero.Options.Try.TryFunction`14">
            <summary>
            Delegate type for a basic try function with 13 additional parameters.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <typeparam name="T7">The type of <paramref name="arg7"/>.</typeparam>
            <typeparam name="T8">The type of <paramref name="arg8"/>.</typeparam>
            <typeparam name="T9">The type of <paramref name="arg9"/>.</typeparam>
            <typeparam name="T10">The type of <paramref name="arg10"/>.</typeparam>
            <typeparam name="T11">The type of <paramref name="arg11"/>.</typeparam>
            <typeparam name="T12">The type of <paramref name="arg12"/>.</typeparam>
            <typeparam name="T13">The type of <paramref name="arg13"/>.</typeparam>
            <typeparam name="TResult">The type of the result parameter.</typeparam>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <param name="arg7">The seventh parameter to be passed to the try function.</param>
            <param name="arg8">The eighth parameter to be passed to the try function.</param>
            <param name="arg9">The ninth parameter to be passed to the try function.</param>
            <param name="arg10">The tenth parameter to be passed to the try function.</param>
            <param name="arg11">The eleventh parameter to be passed to the try function.</param>
            <param name="arg12">The twelfth parameter to be passed to the try function.</param>
            <param name="arg13">The thirteenth parameter to be passed to the try function.</param>
            <param name="result">
            When this method returns, the result of the operation, if it succeeded;
            otherwise, the default value of <typeparamref name="TResult"/>. This parameter
            is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the operation completed successfully; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Hgk.Zero.Options.Try.TryFunction`15">
            <summary>
            Delegate type for a basic try function with 14 additional parameters.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <typeparam name="T7">The type of <paramref name="arg7"/>.</typeparam>
            <typeparam name="T8">The type of <paramref name="arg8"/>.</typeparam>
            <typeparam name="T9">The type of <paramref name="arg9"/>.</typeparam>
            <typeparam name="T10">The type of <paramref name="arg10"/>.</typeparam>
            <typeparam name="T11">The type of <paramref name="arg11"/>.</typeparam>
            <typeparam name="T12">The type of <paramref name="arg12"/>.</typeparam>
            <typeparam name="T13">The type of <paramref name="arg13"/>.</typeparam>
            <typeparam name="T14">The type of <paramref name="arg14"/>.</typeparam>
            <typeparam name="TResult">The type of the result parameter.</typeparam>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <param name="arg7">The seventh parameter to be passed to the try function.</param>
            <param name="arg8">The eighth parameter to be passed to the try function.</param>
            <param name="arg9">The ninth parameter to be passed to the try function.</param>
            <param name="arg10">The tenth parameter to be passed to the try function.</param>
            <param name="arg11">The eleventh parameter to be passed to the try function.</param>
            <param name="arg12">The twelfth parameter to be passed to the try function.</param>
            <param name="arg13">The thirteenth parameter to be passed to the try function.</param>
            <param name="arg14">The fourteenth parameter to be passed to the try function.</param>
            <param name="result">
            When this method returns, the result of the operation, if it succeeded;
            otherwise, the default value of <typeparamref name="TResult"/>. This parameter
            is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the operation completed successfully; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Hgk.Zero.Options.Try.TryFunction`16">
            <summary>
            Delegate type for a basic try function with 15 additional parameters.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <typeparam name="T7">The type of <paramref name="arg7"/>.</typeparam>
            <typeparam name="T8">The type of <paramref name="arg8"/>.</typeparam>
            <typeparam name="T9">The type of <paramref name="arg9"/>.</typeparam>
            <typeparam name="T10">The type of <paramref name="arg10"/>.</typeparam>
            <typeparam name="T11">The type of <paramref name="arg11"/>.</typeparam>
            <typeparam name="T12">The type of <paramref name="arg12"/>.</typeparam>
            <typeparam name="T13">The type of <paramref name="arg13"/>.</typeparam>
            <typeparam name="T14">The type of <paramref name="arg14"/>.</typeparam>
            <typeparam name="T15">The type of <paramref name="arg15"/>.</typeparam>
            <typeparam name="TResult">The type of the result parameter.</typeparam>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <param name="arg7">The seventh parameter to be passed to the try function.</param>
            <param name="arg8">The eighth parameter to be passed to the try function.</param>
            <param name="arg9">The ninth parameter to be passed to the try function.</param>
            <param name="arg10">The tenth parameter to be passed to the try function.</param>
            <param name="arg11">The eleventh parameter to be passed to the try function.</param>
            <param name="arg12">The twelfth parameter to be passed to the try function.</param>
            <param name="arg13">The thirteenth parameter to be passed to the try function.</param>
            <param name="arg14">The fourteenth parameter to be passed to the try function.</param>
            <param name="arg15">The fifteenth parameter to be passed to the try function.</param>
            <param name="result">
            When this method returns, the result of the operation, if it succeeded;
            otherwise, the default value of <typeparamref name="TResult"/>. This parameter
            is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the operation completed successfully; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Hgk.Zero.Options.Try.TryFunction`17">
            <summary>
            Delegate type for a basic try function with 16 additional parameters.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <typeparam name="T7">The type of <paramref name="arg7"/>.</typeparam>
            <typeparam name="T8">The type of <paramref name="arg8"/>.</typeparam>
            <typeparam name="T9">The type of <paramref name="arg9"/>.</typeparam>
            <typeparam name="T10">The type of <paramref name="arg10"/>.</typeparam>
            <typeparam name="T11">The type of <paramref name="arg11"/>.</typeparam>
            <typeparam name="T12">The type of <paramref name="arg12"/>.</typeparam>
            <typeparam name="T13">The type of <paramref name="arg13"/>.</typeparam>
            <typeparam name="T14">The type of <paramref name="arg14"/>.</typeparam>
            <typeparam name="T15">The type of <paramref name="arg15"/>.</typeparam>
            <typeparam name="T16">The type of <paramref name="arg16"/>.</typeparam>
            <typeparam name="TResult">The type of the result parameter.</typeparam>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <param name="arg7">The seventh parameter to be passed to the try function.</param>
            <param name="arg8">The eighth parameter to be passed to the try function.</param>
            <param name="arg9">The ninth parameter to be passed to the try function.</param>
            <param name="arg10">The tenth parameter to be passed to the try function.</param>
            <param name="arg11">The eleventh parameter to be passed to the try function.</param>
            <param name="arg12">The twelfth parameter to be passed to the try function.</param>
            <param name="arg13">The thirteenth parameter to be passed to the try function.</param>
            <param name="arg14">The fourteenth parameter to be passed to the try function.</param>
            <param name="arg15">The fifteenth parameter to be passed to the try function.</param>
            <param name="arg16">The sixteenth parameter to be passed to the try function.</param>
            <param name="result">
            When this method returns, the result of the operation, if it succeeded;
            otherwise, the default value of <typeparamref name="TResult"/>. This parameter
            is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the operation completed successfully; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Hgk.Zero.Options.Try.TryToOpt`1">
            <summary>
            Facilities for adapting typical try functions to produce options.
            </summary>
            <remarks>
            <para>
            For the purposes of this class, a "try function" is a bool-returning function that accepts
            zero or more arbitrary parameters followed by a result <see langword="out"/> parameter. If
            the operation succeeds, the function sets the result parameter to a valid value and then
            returns <see langword="true"/>. If the operation fails (in a non-exceptional way), the
            function sets the result parameter to the default value for its type and returns <see langword="false"/>.
            </para>
            <para>
            Try functions are often used to handle common, expected failures without throwing exceptions.
            For example, several types in the standard library have TryParse methods that produce a value
            and return true if successful, or set the value to default and return false otherwise.
            </para>
            <para>
            The same information can be expressed in an option; an option might contain the result value
            if the operation succeeds or be empty if the operation fails.
            </para>
            <para>
            The type parameters available for the delegates allow simple access to try functions with
            several parameters.
            </para>
            <example>
            <para>
            This sample shows how to wrap a call to <see cref="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)"/> to produce an option.
            (Note that this is already done for you by <see cref="M:Hgk.Zero.Options.Convert.ParseToOpt.ParseTimeSpanExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)"/>.)
            </para>
            <code>
            <![CDATA[
            // Replaces a call to TimeSpan.TryParseExact(input, formats, formatProvider, styles, out TimeSpan result)
            public static Opt<TimeSpan> ParseTimeSpanExactOpt(string input, string[] formats, IFormatProvider formatProvider, TimeSpanStyles styles) =>
                TryToOpt<TimeSpan>.Call(TimeSpan.TryParseExact, input, formats, formatProvider, styles);
            ]]>
            </code>
            </example>
            </remarks>
            <typeparam name="TResult">The type of the result parameter of a try function.</typeparam>
        </member>
        <member name="M:Hgk.Zero.Options.Try.TryToOpt`1.Call(Hgk.Zero.Options.Try.TryFunction{`0})">
            <summary>
            Calls the specified try function and returns an option containing the result.
            </summary>
            <param name="tryFunction">The try function to call.</param>
            <returns>
            An option containing the result parameter produced by calling <paramref name="tryFunction"/>,
            if the operation completed successfully; otherwise, an empty option.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tryFunction"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Try.TryToOpt`1.Call``1(Hgk.Zero.Options.Try.TryFunction{``0,`0},``0)">
            <summary>
            Calls the specified try function with the specified parameter and returns an option containing the result.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <param name="tryFunction">The try function to call.</param>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <returns>
            An option containing the result parameter produced by calling <paramref name="tryFunction"/>,
            if the operation completed successfully; otherwise, an empty option.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tryFunction"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Try.TryToOpt`1.Call``2(Hgk.Zero.Options.Try.TryFunction{``0,``1,`0},``0,``1)">
            <summary>
            Calls the specified try function with the specified parameters and returns an option containing the result.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <param name="tryFunction">The try function to call.</param>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <returns>
            An option containing the result parameter produced by calling <paramref name="tryFunction"/>,
            if the operation completed successfully; otherwise, an empty option.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tryFunction"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Try.TryToOpt`1.Call``3(Hgk.Zero.Options.Try.TryFunction{``0,``1,``2,`0},``0,``1,``2)">
            <summary>
            Calls the specified try function with the specified parameters and returns an option containing the result.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <param name="tryFunction">The try function to call.</param>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <returns>
            An option containing the result parameter produced by calling <paramref name="tryFunction"/>,
            if the operation completed successfully; otherwise, an empty option.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tryFunction"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Try.TryToOpt`1.Call``4(Hgk.Zero.Options.Try.TryFunction{``0,``1,``2,``3,`0},``0,``1,``2,``3)">
            <summary>
            Calls the specified try function with the specified parameters and returns an option containing the result.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <param name="tryFunction">The try function to call.</param>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <returns>
            An option containing the result parameter produced by calling <paramref name="tryFunction"/>,
            if the operation completed successfully; otherwise, an empty option.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tryFunction"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Try.TryToOpt`1.Call``5(Hgk.Zero.Options.Try.TryFunction{``0,``1,``2,``3,``4,`0},``0,``1,``2,``3,``4)">
            <summary>
            Calls the specified try function with the specified parameters and returns an option containing the result.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <param name="tryFunction">The try function to call.</param>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <returns>
            An option containing the result parameter produced by calling <paramref name="tryFunction"/>,
            if the operation completed successfully; otherwise, an empty option.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tryFunction"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Try.TryToOpt`1.Call``6(Hgk.Zero.Options.Try.TryFunction{``0,``1,``2,``3,``4,``5,`0},``0,``1,``2,``3,``4,``5)">
            <summary>
            Calls the specified try function with the specified parameters and returns an option containing the result.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <param name="tryFunction">The try function to call.</param>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <returns>
            An option containing the result parameter produced by calling <paramref name="tryFunction"/>,
            if the operation completed successfully; otherwise, an empty option.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tryFunction"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Try.TryToOpt`1.Call``7(Hgk.Zero.Options.Try.TryFunction{``0,``1,``2,``3,``4,``5,``6,`0},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Calls the specified try function with the specified parameters and returns an option containing the result.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <typeparam name="T7">The type of <paramref name="arg7"/>.</typeparam>
            <param name="tryFunction">The try function to call.</param>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <param name="arg7">The seventh parameter to be passed to the try function.</param>
            <returns>
            An option containing the result parameter produced by calling <paramref name="tryFunction"/>,
            if the operation completed successfully; otherwise, an empty option.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tryFunction"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Try.TryToOpt`1.Call``8(Hgk.Zero.Options.Try.TryFunction{``0,``1,``2,``3,``4,``5,``6,``7,`0},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Calls the specified try function with the specified parameters and returns an option containing the result.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <typeparam name="T7">The type of <paramref name="arg7"/>.</typeparam>
            <typeparam name="T8">The type of <paramref name="arg8"/>.</typeparam>
            <param name="tryFunction">The try function to call.</param>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <param name="arg7">The seventh parameter to be passed to the try function.</param>
            <param name="arg8">The eighth parameter to be passed to the try function.</param>
            <returns>
            An option containing the result parameter produced by calling <paramref name="tryFunction"/>,
            if the operation completed successfully; otherwise, an empty option.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tryFunction"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Try.TryToOpt`1.Call``9(Hgk.Zero.Options.Try.TryFunction{``0,``1,``2,``3,``4,``5,``6,``7,``8,`0},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Calls the specified try function with the specified parameters and returns an option containing the result.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <typeparam name="T7">The type of <paramref name="arg7"/>.</typeparam>
            <typeparam name="T8">The type of <paramref name="arg8"/>.</typeparam>
            <typeparam name="T9">The type of <paramref name="arg9"/>.</typeparam>
            <param name="tryFunction">The try function to call.</param>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <param name="arg7">The seventh parameter to be passed to the try function.</param>
            <param name="arg8">The eighth parameter to be passed to the try function.</param>
            <param name="arg9">The ninth parameter to be passed to the try function.</param>
            <returns>
            An option containing the result parameter produced by calling <paramref name="tryFunction"/>,
            if the operation completed successfully; otherwise, an empty option.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tryFunction"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Try.TryToOpt`1.Call``10(Hgk.Zero.Options.Try.TryFunction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,`0},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Calls the specified try function with the specified parameters and returns an option containing the result.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <typeparam name="T7">The type of <paramref name="arg7"/>.</typeparam>
            <typeparam name="T8">The type of <paramref name="arg8"/>.</typeparam>
            <typeparam name="T9">The type of <paramref name="arg9"/>.</typeparam>
            <typeparam name="T10">The type of <paramref name="arg10"/>.</typeparam>
            <param name="tryFunction">The try function to call.</param>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <param name="arg7">The seventh parameter to be passed to the try function.</param>
            <param name="arg8">The eighth parameter to be passed to the try function.</param>
            <param name="arg9">The ninth parameter to be passed to the try function.</param>
            <param name="arg10">The tenth parameter to be passed to the try function.</param>
            <returns>
            An option containing the result parameter produced by calling <paramref name="tryFunction"/>,
            if the operation completed successfully; otherwise, an empty option.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tryFunction"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Try.TryToOpt`1.Call``11(Hgk.Zero.Options.Try.TryFunction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,`0},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Calls the specified try function with the specified parameters and returns an option containing the result.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <typeparam name="T7">The type of <paramref name="arg7"/>.</typeparam>
            <typeparam name="T8">The type of <paramref name="arg8"/>.</typeparam>
            <typeparam name="T9">The type of <paramref name="arg9"/>.</typeparam>
            <typeparam name="T10">The type of <paramref name="arg10"/>.</typeparam>
            <typeparam name="T11">The type of <paramref name="arg11"/>.</typeparam>
            <param name="tryFunction">The try function to call.</param>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <param name="arg7">The seventh parameter to be passed to the try function.</param>
            <param name="arg8">The eighth parameter to be passed to the try function.</param>
            <param name="arg9">The ninth parameter to be passed to the try function.</param>
            <param name="arg10">The tenth parameter to be passed to the try function.</param>
            <param name="arg11">The eleventh parameter to be passed to the try function.</param>
            <returns>
            An option containing the result parameter produced by calling <paramref name="tryFunction"/>,
            if the operation completed successfully; otherwise, an empty option.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tryFunction"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Try.TryToOpt`1.Call``12(Hgk.Zero.Options.Try.TryFunction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,`0},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Calls the specified try function with the specified parameters and returns an option containing the result.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <typeparam name="T7">The type of <paramref name="arg7"/>.</typeparam>
            <typeparam name="T8">The type of <paramref name="arg8"/>.</typeparam>
            <typeparam name="T9">The type of <paramref name="arg9"/>.</typeparam>
            <typeparam name="T10">The type of <paramref name="arg10"/>.</typeparam>
            <typeparam name="T11">The type of <paramref name="arg11"/>.</typeparam>
            <typeparam name="T12">The type of <paramref name="arg12"/>.</typeparam>
            <param name="tryFunction">The try function to call.</param>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <param name="arg7">The seventh parameter to be passed to the try function.</param>
            <param name="arg8">The eighth parameter to be passed to the try function.</param>
            <param name="arg9">The ninth parameter to be passed to the try function.</param>
            <param name="arg10">The tenth parameter to be passed to the try function.</param>
            <param name="arg11">The eleventh parameter to be passed to the try function.</param>
            <param name="arg12">The twelfth parameter to be passed to the try function.</param>
            <returns>
            An option containing the result parameter produced by calling <paramref name="tryFunction"/>,
            if the operation completed successfully; otherwise, an empty option.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tryFunction"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Try.TryToOpt`1.Call``13(Hgk.Zero.Options.Try.TryFunction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,`0},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Calls the specified try function with the specified parameters and returns an option containing the result.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <typeparam name="T7">The type of <paramref name="arg7"/>.</typeparam>
            <typeparam name="T8">The type of <paramref name="arg8"/>.</typeparam>
            <typeparam name="T9">The type of <paramref name="arg9"/>.</typeparam>
            <typeparam name="T10">The type of <paramref name="arg10"/>.</typeparam>
            <typeparam name="T11">The type of <paramref name="arg11"/>.</typeparam>
            <typeparam name="T12">The type of <paramref name="arg12"/>.</typeparam>
            <typeparam name="T13">The type of <paramref name="arg13"/>.</typeparam>
            <param name="tryFunction">The try function to call.</param>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <param name="arg7">The seventh parameter to be passed to the try function.</param>
            <param name="arg8">The eighth parameter to be passed to the try function.</param>
            <param name="arg9">The ninth parameter to be passed to the try function.</param>
            <param name="arg10">The tenth parameter to be passed to the try function.</param>
            <param name="arg11">The eleventh parameter to be passed to the try function.</param>
            <param name="arg12">The twelfth parameter to be passed to the try function.</param>
            <param name="arg13">The thirteenth parameter to be passed to the try function.</param>
            <returns>
            An option containing the result parameter produced by calling <paramref name="tryFunction"/>,
            if the operation completed successfully; otherwise, an empty option.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tryFunction"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Try.TryToOpt`1.Call``14(Hgk.Zero.Options.Try.TryFunction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,`0},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Calls the specified try function with the specified parameters and returns an option containing the result.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <typeparam name="T7">The type of <paramref name="arg7"/>.</typeparam>
            <typeparam name="T8">The type of <paramref name="arg8"/>.</typeparam>
            <typeparam name="T9">The type of <paramref name="arg9"/>.</typeparam>
            <typeparam name="T10">The type of <paramref name="arg10"/>.</typeparam>
            <typeparam name="T11">The type of <paramref name="arg11"/>.</typeparam>
            <typeparam name="T12">The type of <paramref name="arg12"/>.</typeparam>
            <typeparam name="T13">The type of <paramref name="arg13"/>.</typeparam>
            <typeparam name="T14">The type of <paramref name="arg14"/>.</typeparam>
            <param name="tryFunction">The try function to call.</param>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <param name="arg7">The seventh parameter to be passed to the try function.</param>
            <param name="arg8">The eighth parameter to be passed to the try function.</param>
            <param name="arg9">The ninth parameter to be passed to the try function.</param>
            <param name="arg10">The tenth parameter to be passed to the try function.</param>
            <param name="arg11">The eleventh parameter to be passed to the try function.</param>
            <param name="arg12">The twelfth parameter to be passed to the try function.</param>
            <param name="arg13">The thirteenth parameter to be passed to the try function.</param>
            <param name="arg14">The fourteenth parameter to be passed to the try function.</param>
            <returns>
            An option containing the result parameter produced by calling <paramref name="tryFunction"/>,
            if the operation completed successfully; otherwise, an empty option.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tryFunction"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Try.TryToOpt`1.Call``15(Hgk.Zero.Options.Try.TryFunction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,`0},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Calls the specified try function with the specified parameters and returns an option containing the result.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <typeparam name="T7">The type of <paramref name="arg7"/>.</typeparam>
            <typeparam name="T8">The type of <paramref name="arg8"/>.</typeparam>
            <typeparam name="T9">The type of <paramref name="arg9"/>.</typeparam>
            <typeparam name="T10">The type of <paramref name="arg10"/>.</typeparam>
            <typeparam name="T11">The type of <paramref name="arg11"/>.</typeparam>
            <typeparam name="T12">The type of <paramref name="arg12"/>.</typeparam>
            <typeparam name="T13">The type of <paramref name="arg13"/>.</typeparam>
            <typeparam name="T14">The type of <paramref name="arg14"/>.</typeparam>
            <typeparam name="T15">The type of <paramref name="arg15"/>.</typeparam>
            <param name="tryFunction">The try function to call.</param>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <param name="arg7">The seventh parameter to be passed to the try function.</param>
            <param name="arg8">The eighth parameter to be passed to the try function.</param>
            <param name="arg9">The ninth parameter to be passed to the try function.</param>
            <param name="arg10">The tenth parameter to be passed to the try function.</param>
            <param name="arg11">The eleventh parameter to be passed to the try function.</param>
            <param name="arg12">The twelfth parameter to be passed to the try function.</param>
            <param name="arg13">The thirteenth parameter to be passed to the try function.</param>
            <param name="arg14">The fourteenth parameter to be passed to the try function.</param>
            <param name="arg15">The fifteenth parameter to be passed to the try function.</param>
            <returns>
            An option containing the result parameter produced by calling <paramref name="tryFunction"/>,
            if the operation completed successfully; otherwise, an empty option.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tryFunction"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Hgk.Zero.Options.Try.TryToOpt`1.Call``16(Hgk.Zero.Options.Try.TryFunction{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,`0},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            Calls the specified try function with the specified parameters and returns an option containing the result.
            </summary>
            <typeparam name="T1">The type of <paramref name="arg1"/>.</typeparam>
            <typeparam name="T2">The type of <paramref name="arg2"/>.</typeparam>
            <typeparam name="T3">The type of <paramref name="arg3"/>.</typeparam>
            <typeparam name="T4">The type of <paramref name="arg4"/>.</typeparam>
            <typeparam name="T5">The type of <paramref name="arg5"/>.</typeparam>
            <typeparam name="T6">The type of <paramref name="arg6"/>.</typeparam>
            <typeparam name="T7">The type of <paramref name="arg7"/>.</typeparam>
            <typeparam name="T8">The type of <paramref name="arg8"/>.</typeparam>
            <typeparam name="T9">The type of <paramref name="arg9"/>.</typeparam>
            <typeparam name="T10">The type of <paramref name="arg10"/>.</typeparam>
            <typeparam name="T11">The type of <paramref name="arg11"/>.</typeparam>
            <typeparam name="T12">The type of <paramref name="arg12"/>.</typeparam>
            <typeparam name="T13">The type of <paramref name="arg13"/>.</typeparam>
            <typeparam name="T14">The type of <paramref name="arg14"/>.</typeparam>
            <typeparam name="T15">The type of <paramref name="arg15"/>.</typeparam>
            <typeparam name="T16">The type of <paramref name="arg16"/>.</typeparam>
            <param name="tryFunction">The try function to call.</param>
            <param name="arg1">The first parameter to be passed to the try function.</param>
            <param name="arg2">The second parameter to be passed to the try function.</param>
            <param name="arg3">The third parameter to be passed to the try function.</param>
            <param name="arg4">The fourth parameter to be passed to the try function.</param>
            <param name="arg5">The fifth parameter to be passed to the try function.</param>
            <param name="arg6">The sixth parameter to be passed to the try function.</param>
            <param name="arg7">The seventh parameter to be passed to the try function.</param>
            <param name="arg8">The eighth parameter to be passed to the try function.</param>
            <param name="arg9">The ninth parameter to be passed to the try function.</param>
            <param name="arg10">The tenth parameter to be passed to the try function.</param>
            <param name="arg11">The eleventh parameter to be passed to the try function.</param>
            <param name="arg12">The twelfth parameter to be passed to the try function.</param>
            <param name="arg13">The thirteenth parameter to be passed to the try function.</param>
            <param name="arg14">The fourteenth parameter to be passed to the try function.</param>
            <param name="arg15">The fifteenth parameter to be passed to the try function.</param>
            <param name="arg16">The sixteenth parameter to be passed to the try function.</param>
            <returns>
            An option containing the result parameter produced by calling <paramref name="tryFunction"/>,
            if the operation completed successfully; otherwise, an empty option.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tryFunction"/> is <see langword="null"/>.
            </exception>
        </member>
    </members>
</doc>
